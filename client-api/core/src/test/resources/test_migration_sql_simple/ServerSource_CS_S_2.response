{"CSharpServer/.cs":"\r\nnamespace _DatabaseCommon\r\n{\r\n\tusing System;\r\n\tusing System.Collections;\r\n\tusing System.Collections.Generic;\r\n\r\n\tinternal static partial class Utility\r\n\t{\r\n\t\tpublic static T[] ConvertToArray<T>(List<T> source)\r\n\t\t{\r\n\t\t\treturn source != null ? source.ToArray() : null;\r\n\t\t}\r\n\t\tpublic static List<T> ConvertToList<T>(List<T> source)\r\n\t\t{\r\n\t\t\treturn source;\r\n\t\t}\r\n\t\tpublic static HashSet<T> ConvertToSet<T>(List<T> source)\r\n\t\t{\r\n\t\t\treturn source != null ? new HashSet<T>(source) : null;\r\n\t\t}\r\n\t}\r\n}\r\nnamespace _DatabaseCommon\r\n{\r\n\tusing System.Collections.Generic;\r\n\tusing System.IO;\r\n\tusing System.Text;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\r\n\tinternal static partial class Utility\r\n\t{\r\n\t\tpublic static int? ToNullableInt(this string value)\r\n\t\t{\r\n\t\t\tif(!string.IsNullOrWhiteSpace(value))\r\n\t\t\t\treturn int.Parse(value, System.Globalization.CultureInfo.InvariantCulture);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tpublic static string NullableIntegerToString(int? value)\r\n\t\t{\r\n\t\t\tif(value.HasValue)\r\n\t\t\t\treturn value.Value.ToString(System.Globalization.CultureInfo.InvariantCulture);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tpublic static ValueTuple NullableIntegerToTuple(int? value)\r\n\t\t{\r\n\t\t\treturn value != null ? new ValueTuple(value.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), false, false) : null;\r\n\t\t}\r\n\r\n\t\tpublic static int? ParseNullableInt(TextReader reader, int context)\r\n\t\t{\r\n\t\t\treturn IntConverter.ParseNullable(reader);\r\n\t\t}\r\n\r\n\t\tpublic static List<int?> ParseNullableListInt(TextReader reader, int context)\r\n\t\t{\r\n\t\t\treturn IntConverter.ParseNullableCollection(reader, context);\r\n\t\t}\r\n\t}\r\n}\r\nnamespace _DatabaseCommon\r\n{\r\n\tusing System.Collections.Generic;\r\n\tusing System.IO;\r\n\tusing System.Text;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\r\n\tinternal static partial class Utility\r\n\t{\r\n\t\tpublic static int ToInt(this string value)\r\n\t\t{\r\n\t\t\tif(!string.IsNullOrWhiteSpace(value))\r\n\t\t\t\treturn int.Parse(value, System.Globalization.CultureInfo.InvariantCulture);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tpublic static string IntegerToString(int value)\r\n\t\t{\r\n\t\t\treturn value.ToString(System.Globalization.CultureInfo.InvariantCulture);\r\n\t\t}\r\n\r\n\t\tpublic static ValueTuple IntegerToTuple(int value)\r\n\t\t{\r\n\t\t\treturn new ValueTuple(value.ToString(System.Globalization.CultureInfo.InvariantCulture), false, false);\r\n\t\t}\r\n\r\n\t\tpublic static int ParseInt(TextReader reader, int context)\r\n\t\t{\r\n\t\t\treturn IntConverter.Parse(reader);\r\n\t\t}\r\n\r\n\t\tpublic static List<int> ParseListInt(TextReader reader, int context)\r\n\t\t{\r\n\t\t\treturn IntConverter.ParseCollection(reader, context);\r\n\t\t}\r\n\t}\r\n}","CSharpServer/SystemBoot.Configuration.cs":"\r\nnamespace SystemBoot\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\r\n\tusing NGS.DatabasePersistence;\r\n\r\n\tusing System.Data;\r\n\r\n\tpublic class Configuration : ISystemAspect\r\n\t{\r\n\t\tprivate static bool IsInitialized;\r\n\r\n\t\tpublic void Initialize(IObjectFactory factory)\r\n\t\t{\r\n\t\t\tif(IsInitialized)\r\n\t\t\t\treturn;\r\n\t\t\tIsInitialized = true;\r\n\r\n\t\t\t{\r\n\t\t\t\tvar dbTranConf = factory.Resolve<NGS.DatabasePersistence.IDatabaseQueryManager>();\r\n\t\t\t\tvar dbQuery = dbTranConf.CreateQuery();\r\n\t\t\t\tvar columnsInfo = dbQuery.Fill(@\"SELECT * FROM \"\"-NGS-\"\".Load_Type_Info()\");\r\n\t\t\t\tcolumnsInfo.CaseSensitive = true;\r\n\t\t\t\tcolumnsInfo.PrimaryKey = new[] { columnsInfo.Columns[0], columnsInfo.Columns[1], columnsInfo.Columns[2] };\r\n\t\t\t\t_DatabaseConfiguration.DatabaseConverters.Initialize(columnsInfo);\r\n\t\t\t\tdbTranConf.EndQuery(dbQuery, false);\r\n\t\t\t}\r\n\t\t\tvar postgresConverter = factory.Resolve<NGS.DatabasePersistence.Postgres.IPostgresConverterRepository>();\r\n\t\t\tpostgresConverter.RegisterConverter(typeof(myModule.A), new _DatabaseCommon.FactorymyModule_A.AConverter());\r\n\t\t\tDatabaseRepositorymyModule.RegisterA.Register(factory);\r\n\t\t\tpostgresConverter.RegisterConverter(typeof(myModule.B), new _DatabaseCommon.FactorymyModule_B.BConverter());\r\n\t\t\tDatabaseRepositorymyModule.RegisterB.Register(factory);\r\n\t\t}\r\n\t}\r\n}\r\n","CSharpServer/AssemblyInfo.cs":"\r\nusing System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\nusing System;\r\n\r\n[assembly: AssemblyTitle(\"DSL Platform generated model\")]\r\n[assembly: AssemblyDescription(\"https://dsl-platform.com/\")]\r\n[assembly: AssemblyConfiguration(\"\")]\r\n[assembly: AssemblyCompany(\"N.G.S.\")]\r\n[assembly: AssemblyProduct(\"DSL Platform\")]\r\n[assembly: AssemblyCopyright(\"Copyright Â© DSL Platform 2014\")]\r\n[assembly: AssemblyTrademark(\"\")]\r\n[assembly: AssemblyCulture(\"\")]\r\n[assembly: ComVisible(false)]\r\n[assembly: AssemblyVersion(\"2014.5.5.1906\")]\r\n[assembly: AssemblyFileVersion(\"2014.5.5.1906\")]\r\n[assembly: CLSCompliant(true)]","CSharpServer/myModule.A.cs":"\r\nnamespace myModule\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\t[Serializable]\r\n\t[DataContract(Namespace=\"\")] public partial class A : System.ICloneable, NGS.DomainPatterns.IEntity, IEquatable<A>, NGS.DomainPatterns.IAggregateRoot, NGS.DomainPatterns.ICacheable, IChangeTracking<A>, NGS.Serialization.IJsonObject\r\n\t{\r\n\r\n\t\tpublic override string ToString()\r\n\t\t{\r\n\r\n\t\t\treturn base.ToString();\r\n\t\t}\r\n\r\n\t\t[System.Runtime.Serialization.OnDeserialized]\r\n\t\tprivate void OnDeserialized(StreamingContext context)\r\n\t\t{\r\n\r\n\t\t\tvar locator = context.Context as IServiceLocator;\r\n\t\t\tif (locator == null) return;\r\n\t\t}\r\n\r\n\t\tinternal long _InternalGetSizeApproximation()\r\n\t\t{\r\n\t\t\tlong size = 5;\r\n\t\t\treturn size;\r\n\t\t}\r\n\r\n\t\tinternal void __InternalPrepareInsert() {}\r\n\t\tinternal void __InternalPrepareUpdate() {}\r\n\t\tinternal void __InternalPrepareDelete() {}\r\n\t\tobject ICloneable.Clone() { return Clone(); }\r\n\r\n\t\tinternal void __ReapplyReferences() {}\r\n\t\t[DataMember] public string URI { get; internal set; }\r\n\r\n\t\tpublic A()\r\n\r\n\t\t{\r\n\r\n\t\t\tthis.URI = Guid.NewGuid().ToString();\r\n\t\t}\r\n\r\n\t\tbool IEquatable<IEntity>.Equals(IEntity obj)\r\n\t\t{\r\n\t\t\tvar other = obj as A;\r\n\t\t\treturn other != null\r\n\r\n\t\t\t\t&& other.ID == this.ID\r\n\t\t\t;\r\n\t\t}\r\n\r\n\t\tpublic override int GetHashCode()\r\n\t\t{\r\n\t\t\treturn this.URI != null ? this.URI.GetHashCode() : base.GetHashCode();\r\n\t\t}\r\n\r\n\t\tpublic A Clone()\r\n\t\t{\r\n\t\t\tvar item = new A\r\n\t\t\t{\r\n\t\t\t\tURI = this.URI,\r\n\r\n\t\t\t\tID = this.ID,\r\n\t\t\t};\r\n\r\n\t\t\treturn item;\r\n\t\t}\r\n\t\t//TODO let's leave it out for now\r\n\t\t//public override bool Equals(object other) { return Equals(other as A); }\r\n\t\tpublic bool Equals(A other)\r\n\t\t{\r\n\t\t\treturn (this as IEquatable<IEntity>).Equals(other)\r\n\t\t\t\t&& other.URI == this.URI\r\n\r\n\t\t\t\t&& other.ID == this.ID\r\n\t\t\t;\r\n\t\t}\r\n\r\n\t\t[DataMember(EmitDefaultValue=false,Name=\"ID\")]\r\n\t\tinternal int _ID  = NumberCounter<A>.GetNextTempInt();\r\n\r\n\t\tpublic int ID\r\n\t\t{\r\n\r\n\t\t\tget\r\n\t\t\t{\r\n\r\n\t\t\t\treturn this._ID;\r\n\t\t\t}\r\n\t\t\tinternal\r\n\t\t\tset\r\n\t\t\t{\r\n\r\n\t\t\t\tthis._ID = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tDictionary<System.Type, IEnumerable<string>> ICacheable.GetRelationships()\r\n\t\t{\r\n\r\n\t\t\tvar result = new List<KeyValuePair<System.Type, string>>();\r\n\r\n\t\t\treturn result.GroupBy(it => it.Key).ToDictionary(it => it.Key, it => it.Select(e => e.Value));\r\n\r\n\t\t}\r\n\r\n\t\tpublic static event Action<A> Validating = a => {};\r\n\t\tpublic void Validate()\r\n\t\t{\r\n\t\t\tValidating(this);\r\n\t\t}\r\n\r\n\t\tinternal A __OriginalValue;\r\n\t\tA IChangeTracking<A>.GetOriginalValue()\r\n\t\t{\r\n\t\t\treturn __OriginalValue;\r\n\t\t}\r\n\r\n\t\tvoid global::NGS.Serialization.IJsonObject.Serialize(System.IO.StreamWriter sw, Action<System.IO.StreamWriter, object> serializer)\r\n\t\t{\r\n\r\n\t\t\tsw.Write('{');\r\n\t\t\t__SerializeJsonObject(sw, new char[36], serializer, false);\r\n\t\t\tsw.Write('}');\r\n\t\t}\r\n\r\n\t\tinternal void __SerializeJsonObject(System.IO.StreamWriter sw, char[] buffer, Action<System.IO.StreamWriter, object> serializer, bool hasWrittenProperty = false)\r\n\t\t{\r\n\r\n\t\t\tif(hasWrittenProperty) sw.Write(',');\r\n\t\t\tsw.Write(\"\\\"URI\\\":\");\r\n\t\t\tglobal::NGS.Serialization.Json.Converters.StringConverter.Serialize(URI, sw);\r\n\r\n\t\t\t\tvar __expID = this.ID;\r\n\t\t\t\tif (__expID != default(int))\r\n\t\t\t\t{\r\n\t\t\t\t\tsw.Write(\",\\\"ID\\\":\");\r\n\t\t\t\t\tglobal::NGS.Serialization.Json.Converters.NumberConverter.Serialize(__expID, sw, buffer);\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","CSharpServer/_DatabaseConfiguration.DatabaseConverters.cs":"\r\nnamespace _DatabaseConfiguration\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tinternal partial class DatabaseConverters\r\n\t{\r\n\r\n\t\tinternal static void Initialize(System.Data.DataTable columnsInfo)\r\n\t\t{\r\n\r\n\t\t\tSystem.Data.DataRow row = null;\r\n\t\t\t_DatabaseCommon.FactorymyModule_A.AConverter.InitializeProperties(columnsInfo);\r\n\t\t\t_DatabaseCommon.FactorymyModule_B.BConverter.InitializeProperties(columnsInfo);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","CSharpServer/_DatabaseCommon.FactorymyModule_A.AConverter.cs":"\r\nnamespace _DatabaseCommon.FactorymyModule_A\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tusing System.Globalization;\r\n\tusing System.IO;\r\n\tusing NGS.DatabasePersistence;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Utility;\r\n\r\n\tinternal class AConverter : IPostgresTypeConverter\r\n\t{\r\n\t\tpublic object CreateInstance(object value, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tif (value == null)\r\n\t\t\t\treturn null;\r\n\t\t\tusing(var sr = value as System.IO.TextReader ?? new System.IO.StringReader(value as string ?? value.ToString()))\r\n\t\t\t{\r\n\t\t\t\treturn CreateFromRecord(sr, 0, locator);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic PostgresTuple ToTuple(object instance)\r\n\t\t{\r\n\t\t\treturn CreateTupleFrom(instance as myModule.A);\r\n\t\t}\r\n\r\n\t\tpublic static RecordTuple CreateExtendedTupleFrom(myModule.A item)\r\n\t\t{\r\n\t\t\tif(item == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar items = new PostgresTuple[ExtendedColumnCount];\r\n\r\n\t\t\titems[ExtendedProperty_URI_Index] = new ValueTuple(item.URI);\r\n\t\t\titems[ExtendedProperty_ID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.ID);\r\n\t\t\treturn new RecordTuple(items);\r\n\t\t}\r\n\r\n\t\tpublic static RecordTuple CreateTupleFrom(myModule.A item)\r\n\t\t{\r\n\t\t\tif(item == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar items = new PostgresTuple[ColumnCount];\r\n\r\n\t\t\titems[Property_URI_Index] = new ValueTuple(item.URI);\r\n\t\t\titems[Property_ID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.ID);\r\n\t\t\treturn new RecordTuple(items);\r\n\t\t}\r\n\r\n\t\tprivate static int ColumnCount;\r\n\t\tprivate static int ExtendedColumnCount;\r\n\r\n\t\tinternal static void InitializeProperties(System.Data.DataTable columnsInfo)\r\n\t\t{\r\n\t\t\tSystem.Data.DataRow row = null;\r\n\r\n\t\t\tColumnCount = columnsInfo.Select(\"type_schema = 'myModule' AND type_name = 'A_entity'\").Length;\r\n\t\t\tExtendedColumnCount = columnsInfo.Select(\"type_schema = 'myModule' AND type_name = '-ngs_A_type-'\").Length;\r\n\r\n\t\t\tReaderConfiguration = new Action<myModule.A, TextReader, int, IServiceLocator>[ColumnCount > 0 ? ColumnCount : 1];\r\n\t\t\tReaderExtendedConfiguration = new Action<myModule.A, TextReader, int, IServiceLocator>[ExtendedColumnCount > 0 ? ExtendedColumnCount : 1];\r\n\t\t\tfor(int i = 0;i < ColumnCount; i++)\r\n\t\t\t\tReaderConfiguration[i] = (agg, tr, c, sl) => StringConverter.Skip(tr, c);\r\n\t\t\tif(ColumnCount != ReaderConfiguration.Length)\r\n\t\t\t\tReaderConfiguration[0] = (agg, tr, c, sl) => tr.Read();\r\n\t\t\tfor(int i = 0;i < ExtendedColumnCount; i++)\r\n\t\t\t\tReaderExtendedConfiguration[i] = (agg, tr, c, sl) => StringConverter.Skip(tr, c);\r\n\t\t\tif(ExtendedColumnCount != ReaderExtendedConfiguration.Length)\r\n\t\t\t\tReaderExtendedConfiguration[0] = (agg, tr, c, sl) => tr.Read();\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"A_entity\", \"URI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column URI in type myModule.A_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_URI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_A_type-\", \"URI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column URI in type myModule.A. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_URI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_URI_Index] = (item, reader, context, locator) => item.URI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_URI_Index] = (item, reader, context, locator) => item.URI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"A_entity\", \"ID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column ID in type myModule.A_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_ID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_ID_Index] = (item, reader, context, locator) => item._ID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_A_type-\", \"ID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column ID in type myModule.A. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_ID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_ID_Index] = (item, reader, context, locator) => item._ID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t}\r\n\r\n\t\tprivate static Action<myModule.A, TextReader, int, IServiceLocator>[] ReaderConfiguration;\r\n\t\tprivate static Action<myModule.A, TextReader, int, IServiceLocator>[] ReaderExtendedConfiguration;\r\n\r\n\t\tpublic static myModule.A CreateFromRecord(TextReader reader, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tvar cur = reader.Read();\r\n\t\t\tif (cur == ',' || cur == ')')\r\n\t\t\t\treturn null;\r\n\t\t\tvar result = CreateFromRecord(reader, context, context == 0 ? 1 : context << 1, locator);\r\n\t\t\treader.Read();\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.A CreateFromRecord(TextReader reader, int outerContext, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\t\t\tvar item = new myModule.A();\r\n\t\t\tforeach (var config in ReaderConfiguration)\r\n\t\t\t\tconfig(item, reader, context, locator);\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\r\n\t\t\titem.__OriginalValue = item.Clone();\r\n\t\t\treturn item;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.A CreateFromExtendedRecord(TextReader reader, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tvar cur = reader.Read();\r\n\t\t\tif (cur == ',' || cur == ')')\r\n\t\t\t\treturn null;\r\n\t\t\tvar result = CreateFromExtendedRecord(reader, context, context == 0 ? 1 : context << 1, locator);\r\n\t\t\treader.Read();\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.A CreateFromExtendedRecord(TextReader reader, int outerContext, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\t\t\tvar item = new myModule.A();\r\n\t\t\tforeach (var config in ReaderExtendedConfiguration)\r\n\t\t\t\tconfig(item, reader, context, locator);\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\r\n\t\t\titem.__OriginalValue = item.Clone();\r\n\t\t\treturn item;\r\n\t\t}\r\n\r\n\t\tprivate static int Property_URI_Index;\r\n\t\tprivate static int ExtendedProperty_URI_Index;\r\n\t\tinternal static List<int> OptionalEntityReferences = new List<int>();\r\n\t\tprivate static int Property_ID_Index;\r\n\t\tprivate static int ExtendedProperty_ID_Index;\r\n\r\n\t\tinternal static string BuildURI(int ID)\r\n\t\t{\r\n\t\t\treturn _DatabaseCommon.Utility.IntegerToString(ID);\r\n\t\t}\r\n\r\n\t\tinternal static void ParseURI(IServiceLocator locator, string URI, out int ID)\r\n\t\t{\r\n\r\n\t\t\tID = _DatabaseCommon.Utility.ToInt(URI);\r\n\t\t}\r\n\t}\r\n}\r\n","CSharpServer/DatabaseRepositorymyModule.ARepository.cs":"\r\nnamespace DatabaseRepositorymyModule\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tusing NGS.Utility;\r\n\tusing System.IO;\r\n\r\n\tusing NGS.DatabasePersistence;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\tusing NGS.DatabasePersistence.Postgres.QueryGeneration;\r\n\r\n\tinternal static class RegisterA\r\n\t{\r\n\t\tpublic static void Register(IObjectFactory factory)\r\n\t\t{\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository));\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository), typeof(IQueryableRepository<myModule.A>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterFunc<IQueryable<myModule.A>>(f => f.Resolve<IQueryableRepository<myModule.A>>().Query<myModule.A>(null));\r\n\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository), typeof(IRepository<myModule.A>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterFunc<Func<string, myModule.A>>(f => f.Resolve<IRepository<myModule.A>>().Find);\r\n\t\t\tfactory.RegisterFunc<Func<IEnumerable<string>, myModule.A[]>>(f => f.Resolve<IRepository<myModule.A>>().Find);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository), typeof(IPersistableRepository<myModule.A>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository), typeof(IPersistableRepository<myModule.A>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.ARepository), typeof(IAggregateRootRepository<myModule.A>), InstanceScope.Context);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tinternal partial class ARepository : IQueryableRepository<myModule.A>, System.IDisposable, IRepository<myModule.A>, IPersistableRepository<myModule.A>, IAggregateRootRepository<myModule.A>\r\n\t{\r\n\r\n\t\tprivate readonly IServiceLocator Locator;\r\n\t\tprivate readonly IDatabaseQuery DatabaseQuery;\r\n\r\n\t\tpublic ARepository(IServiceLocator locator, IDatabaseQuery query, IEagerNotification Notifications)\r\n\r\n\t\t{\r\n\r\n\t\t\tthis.Locator = locator;\r\n\t\t\tthis.DatabaseQuery = query;\r\n\r\n\t\t\tthis.Notifications = Notifications;\r\n\t\t\tDataCache = new WeakCache<myModule.A>(this);\r\n\t\t}\r\n\r\n\t\tpublic void Dispose()\r\n\t\t{\r\n\r\n\t\t\tif (!DatabaseQuery.InTransaction)\r\n\t\t\t{\r\n\t\t\t\tNotifyInfo ni;\r\n\t\t\t\twhile (NotifyQueue.TryDequeue(out ni))\r\n\t\t\t\t\tNotifications.Notify(ni);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic IQueryable<myModule.A> Query<TCondition>(ISpecification<TCondition> specification)\r\n\t\t{\r\n\t\t\tif(specification != null && specification.IsSatisfied == null)\r\n\t\t\t\tthrow new ArgumentException(\"Search predicate is not specified\");\r\n\t\t\tif(specification != null && !typeof(TCondition).IsAssignableFrom(typeof(myModule.A)))\r\n\t\t\t\tthrow new ArgumentException(\"Specification is not compatible\");\r\n\r\n\t\t\tIQueryable<myModule.A> data = new Queryable<myModule.A>(new QueryExecutor(DatabaseQuery, Locator));\r\n\t\t\tbool rewritten = false;\r\n\r\n\t\t\tif(!rewritten && specification != null)\r\n\t\t\t{\r\n\t\t\t\tvar specAsNative = specification as ISpecification<myModule.A>;\r\n\t\t\t\tif(specAsNative != null)\r\n\t\t\t\t\tdata = data.Where(specAsNative.IsSatisfied);\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = data.Cast<TCondition>().Where(specification.IsSatisfied).Cast<myModule.A>();\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\tpublic myModule.A[] Search<TCondition>(ISpecification<TCondition> specification, int? limit, int? offset)\r\n\t\t{\r\n\t\t\tif(specification != null && specification.IsSatisfied == null)\r\n\t\t\t\tthrow new ArgumentException(\"Search predicate is not specified\");\r\n\r\n\t\t\tbool rewritten = false;\r\n\t\t\tvar result = new List<myModule.A>();\r\n\r\n\t\t\tif(!rewritten)\r\n\t\t\t{\r\n\t\t\t\tvar query = Query(specification);\r\n\t\t\t\tif (limit != null && limit.Value >= 0)\r\n\t\t\t\t\tquery = query.Take(limit.Value);\r\n\t\t\t\tif (offset != null && offset.Value >= 0)\r\n\t\t\t\t\tquery = query.Skip(offset.Value);\r\n\t\t\t\tresult.AddRange(query);\r\n\t\t\t}\r\n\r\n\t\t\treturn result.ToArray();\r\n\t\t}\r\n\r\n\t\tpublic myModule.A[] Find(IEnumerable<string> uris)\r\n\t\t{\r\n\t\t\tif(uris == null || !uris.Any(it => it != null))\r\n\t\t\t\treturn new myModule.A[0];\r\n\r\n\t\t\tvar pks = uris.Where(it => it != null).ToList();\r\n\t\t\tvar formattedUris = NGS.DatabasePersistence.Postgres.PostgresRecordConverter.BuildSimpleUriList(pks);\r\n\t\t\tvar result = new List<myModule.A>(pks.Count);\r\n\t\t\tDatabaseQuery.Execute(\r\n\t\t\t\t@\"SELECT r FROM \"\"myModule\"\".\"\"A_entity\"\" r WHERE r.\"\"ID\"\" IN (\" + formattedUris + \")\",\r\n\t\t\t\tdr =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar _pg = dr.GetValue(0);\r\n\t\t\t\t\tusing(var _tr = _pg as System.IO.TextReader ?? new System.IO.StringReader(_pg as string))\r\n\t\t\t\t\t\tresult.Add(_DatabaseCommon.FactorymyModule_A.AConverter.CreateFromRecord(_tr, 0, Locator));\r\n\t\t\t\t});\r\n\r\n\t\t\treturn result.ToArray();\r\n\t\t}\r\n\r\n\t\tprivate readonly WeakCache<myModule.A> DataCache;\r\n\t\tprivate readonly System.Collections.Concurrent.ConcurrentQueue<NotifyInfo> NotifyQueue = new System.Collections.Concurrent.ConcurrentQueue<NotifyInfo>();\r\n\t\tprivate readonly IEagerNotification Notifications;\r\n\r\n\t\tpublic string[] Persist(IEnumerable<myModule.A> insert, IEnumerable<KeyValuePair<myModule.A, myModule.A>> update, IEnumerable<myModule.A> delete)\r\n\t\t{\r\n\t\t\tvar insertedData = insert != null ? insert.ToArray() : new myModule.A[0];\r\n\t\t\tvar updatedData = update != null ? update.ToList() : new List<KeyValuePair<myModule.A, myModule.A>>();\r\n\t\t\tvar deletedData = delete != null ? delete.ToArray() : new myModule.A[0];\r\n\r\n\t\t\tif(insertedData.Length == 0 && updatedData.Count == 0 && deletedData.Length == 0)\r\n\t\t\t\treturn new string[0];\r\n\r\n\t\t\tif (updatedData.Count > 0 && updatedData.Any(it => it.Key == null))\r\n\t\t\t{\r\n\t\t\t\t//TODO fetch only null values\r\n\t\t\t\tvar oldValues = Find(updatedData.Select(it => it.Value.URI)).ToDictionary(it => it.URI);\r\n\t\t\t\tif (oldValues.Count != updatedData.Count)\r\n\t\t\t\t\tthrow new ArgumentException(\"Can't find update value. Requested: {0}, found: {1}. Missing: {2}\".With(\r\n\t\t\t\t\t\tupdatedData.Count,\r\n\t\t\t\t\t\toldValues.Count,\r\n\t\t\t\t\t\tstring.Join(\", \", updatedData.Select(it => it.Value.URI).Except(oldValues.Keys))));\r\n\t\t\t\tmyModule.A _val;\r\n\t\t\t\tfor(int i = 0; i < updatedData.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t_val = updatedData[i].Value;\r\n\t\t\t\t\tupdatedData[i] = new KeyValuePair<myModule.A, myModule.A>(oldValues[_val.URI], _val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tupdatedData.RemoveAll(kv => kv.Key.Equals(kv.Value));\r\n\r\n\t\t\tDatabaseQuery.Fill<myModule.A, int>(insertedData, @\"nextval('\"\"myModule\"\".\"\"A_ID_seq\"\"'::regclass)::int\", (it, seq) => it.ID = seq);\r\n\r\n\t\t\tforeach(var it in insertedData)\r\n\t\t\t\tit.Validate();\r\n\t\t\tforeach(var it in updatedData)\r\n\t\t\t\tit.Value.Validate();\r\n\t\t\tforeach(var it in deletedData)\r\n\t\t\t\tit.Validate();\r\n\t\t\tfor(int i = 0; i < insertedData.Length; i++)\r\n\t\t\t\tinsertedData[i].__InternalPrepareInsert();\r\n\t\t\tforeach(var it in updatedData)\r\n\t\t\t\tit.Value.__InternalPrepareUpdate();\r\n\t\t\tfor(int i = 0; i < deletedData.Length; i++)\r\n\t\t\t\tdeletedData[i].__InternalPrepareDelete();\r\n\r\n\t\t\tfor(int i = 0; i < insertedData.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar it = insertedData[i];\r\n\r\n\t\t\t\tit.URI = _DatabaseCommon.FactorymyModule_A.AConverter.BuildURI(it.ID);\r\n\t\t\t}\r\n\t\t\tforeach(var kv in updatedData)\r\n\t\t\t{\r\n\r\n\t\t\t\tkv.Value.URI = _DatabaseCommon.FactorymyModule_A.AConverter.BuildURI(kv.Value.ID);\r\n\t\t\t}\r\n\r\n\t\t\t_InternalDoPersist(insertedData, updatedData, deletedData);\r\n\t\t\tvar resultURI = new string[insertedData.Length];\r\n\t\t\tfor(int i = 0; i < resultURI.Length; i++)\r\n\t\t\t\tresultURI[i] = insertedData[i].URI;\r\n\r\n\t\t\tif (DatabaseQuery.InTransaction)\r\n\t\t\t{\r\n\t\t\t\tif (insertedData.Length > 0) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Insert, resultURI));\r\n\t\t\t\tif (updatedData.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNotifyQueue.Enqueue(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Update, updatedData.Select(it => it.Key.URI).ToArray()));\r\n\t\t\t\t\tif (updatedData.Any(kv => kv.Key.URI != kv.Value.URI)) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Change, updatedData.Where(kv => kv.Key.URI != kv.Value.URI).Select(it => it.Value.URI).ToArray()));\r\n\t\t\t\t}\r\n\t\t\t\tif (deletedData.Length > 0) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Delete, deletedData.Select(it => it.URI).ToArray()));\r\n\t\t\t\tDataCache.Invalidate(updatedData.Select(it => it.Key.URI).Union(deletedData.Select(it => it.URI)));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (insertedData.Length > 0) Notifications.Notify(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Insert, resultURI));\r\n\t\t\t\tif (updatedData.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNotifications.Notify(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Update, updatedData.Select(it => it.Key.URI).ToArray()));\r\n\t\t\t\t\tif (updatedData.Any(kv => kv.Key.URI != kv.Value.URI)) Notifications.Notify(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Change, updatedData.Where(kv => kv.Key.URI != kv.Value.URI).Select(it => it.Value.URI).ToArray()));\r\n\t\t\t\t}\r\n\t\t\t\tif (deletedData.Length > 0) Notifications.Notify(new NotifyInfo(\"myModule.A\", NotifyInfo.OperationEnum.Delete, deletedData.Select(it => it.URI).ToArray()));\r\n\t\t\t}\r\n\r\n\t\t\treturn resultURI;\r\n\t\t}\r\n\r\n\t\tprivate readonly IPostgresTypeConverter TypeConverter = new _DatabaseCommon.FactorymyModule_A.AConverter();\r\n\r\n\t\tprivate void _InternalDoPersist(myModule.A[] insertedData, List<KeyValuePair<myModule.A, myModule.A>> updatedData, myModule.A[] deletedData)\r\n\t\t{\r\n\t\t\tusing(var cms = ChunkedMemoryStream.Create())\r\n\t\t\t{\r\n\t\t\t\tvar sw = cms.GetWriter();\r\n\t\t\t\tsw.Write(\"SELECT \\\"myModule\\\".\\\"persist_A\\\"(\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, insertedData, _DatabaseCommon.FactorymyModule_A.AConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"A_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, updatedData.Select(it => it.Key), _DatabaseCommon.FactorymyModule_A.AConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"A_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, updatedData.Select(it => it.Value), _DatabaseCommon.FactorymyModule_A.AConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"A_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, deletedData, _DatabaseCommon.FactorymyModule_A.AConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"A_entity\"\"[]\");\r\n\r\n\t\t\t\tsw.Write(\")\");\r\n\r\n\t\t\t\tsw.Flush();\r\n\t\t\t\tcms.Position = 0;\r\n\t\t\t\tvar com = new Npgsql.NpgsqlCommand(cms);\r\n\t\t\t\tDatabaseQuery.Execute(com);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmyModule.A[] IAggregateRootRepository<myModule.A>.Create(int count, Action<myModule.A[]> initialize)\r\n\t\t{\r\n\t\t\tif(count < 0)\r\n\t\t\t\tthrow new ArgumentException(\"count must be positive: Provided value \" + count);\r\n\t\t\tvar roots = new myModule.A[count];\r\n\t\t\tfor(int i = 0; i < count; i++)\r\n\t\t\t\troots[i] = new myModule.A();\r\n\t\t\tif(initialize != null)\r\n\t\t\t\tinitialize(roots);\r\n\t\t\tPersist(roots, null, null);\r\n\t\t\treturn roots;\r\n\t\t}\r\n\r\n\t\tmyModule.A[] IAggregateRootRepository<myModule.A>.Update(string[] uris, Action<myModule.A[]> change)\r\n\t\t{\r\n\t\t\tvar roots = Find(uris);\r\n\t\t\tif(roots.Length != uris.Length)\r\n\t\t\t\tthrow new ArgumentException(\"Can't find myModule.A with uri: \".With(string.Join(\", \", uris)));\r\n\t\t\tif(change != null)\r\n\t\t\t{\r\n\t\t\t\tvar originals = roots.Select(it => it.Clone()).ToDictionary(it => it.URI);\r\n\t\t\t\tchange(roots);\r\n\t\t\t\tPersist(null, roots.Select(it => new KeyValuePair<myModule.A, myModule.A>(originals[it.URI], it)).ToList(), null);\r\n\t\t\t}\r\n\t\t\treturn roots;\r\n\t\t}\r\n\r\n\t\tvoid IAggregateRootRepository<myModule.A>.Delete(string[] uris)\r\n\t\t{\r\n\t\t\tvar roots = Find(uris);\r\n\t\t\tif(roots.Length != uris.Length)\r\n\t\t\t\tthrow new ArgumentException(\"Can't find myModule.A with uri: \".With(string.Join(\", \", uris)));\r\n\t\t\tPersist(null, null, roots);\r\n\t\t}\r\n\r\n\t\tIQueryable<myModule.A> IQueryableRepository<myModule.A>.Query<TCondition>(ISpecification<TCondition> specification)\r\n\t\t{\r\n\t\t\treturn Query(specification);\r\n\t\t}\r\n\r\n\t\tmyModule.A[] IQueryableRepository<myModule.A>.Search<TCondition>(ISpecification<TCondition> specification, int? limit, int? offset)\r\n\t\t{\r\n\t\t\treturn Search(specification, limit, offset);\r\n\t\t}\r\n\r\n\t\tmyModule.A[] IRepository<myModule.A>.Find(IEnumerable<string> uris) { return Find(uris); }\r\n\t}\r\n\r\n}\r\n","CSharpServer/myModule.B.cs":"\r\nnamespace myModule\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\t[Serializable]\r\n\t[DataContract(Namespace=\"\")] public partial class B : System.ICloneable, NGS.DomainPatterns.IEntity, IEquatable<B>, NGS.DomainPatterns.IAggregateRoot, NGS.DomainPatterns.ICacheable, IChangeTracking<B>, NGS.Serialization.IJsonObject\r\n\t{\r\n\r\n\t\tpublic override string ToString()\r\n\t\t{\r\n\r\n\t\t\treturn base.ToString();\r\n\t\t}\r\n\r\n\t\t[System.Runtime.Serialization.OnDeserialized]\r\n\t\tprivate void OnDeserialized(StreamingContext context)\r\n\t\t{\r\n\r\n\t\t\tvar locator = context.Context as IServiceLocator;\r\n\t\t\tif (locator == null) return;\r\n\t\t\t__DataCachea = new Lazy<IDataCache<myModule.A>>(() => locator.Resolve<IDataCache<myModule.A>>());\r\n\t\t\tif(aURI == null) throw new ArgumentException(\"In entity myModule.B, property a can't be null. aURI provided as null\");\r\n\t\t}\r\n\r\n\t\tinternal long _InternalGetSizeApproximation()\r\n\t\t{\r\n\t\t\tlong size = 15;\r\n\t\t\treturn size;\r\n\t\t}\r\n\r\n\t\tinternal void __InternalPrepareInsert() {}\r\n\t\tinternal void __InternalPrepareUpdate() {}\r\n\t\tinternal void __InternalPrepareDelete() {}\r\n\t\tobject ICloneable.Clone() { return Clone(); }\r\n\r\n\t\tinternal void __ReapplyReferences()\r\n\t\t{\r\n\t\t\tif (_a != null && _a.URI != aURI) this.a = _a;\r\n\t\t}\r\n\t\t[DataMember] public string URI { get; internal set; }\r\n\r\n\t\tpublic B()\r\n\r\n\t\t{\r\n\r\n\t\t\tthis.URI = Guid.NewGuid().ToString();\r\n\t\t}\r\n\r\n\t\tbool IEquatable<IEntity>.Equals(IEntity obj)\r\n\t\t{\r\n\t\t\tvar other = obj as B;\r\n\t\t\treturn other != null\r\n\r\n\t\t\t\t&& other.ID == this.ID\r\n\t\t\t;\r\n\t\t}\r\n\r\n\t\tpublic override int GetHashCode()\r\n\t\t{\r\n\t\t\treturn this.URI != null ? this.URI.GetHashCode() : base.GetHashCode();\r\n\t\t}\r\n\r\n\t\tpublic B Clone()\r\n\t\t{\r\n\t\t\tvar item = new B\r\n\t\t\t{\r\n\t\t\t\tURI = this.URI,\r\n\r\n\t\t\t\tID = this.ID,\r\n\t\t\t\t_aURI = this._aURI, _a = this._a,\r\n\t\t\t\taID = this.aID,\r\n\t\t\t};\r\n\r\n\t\t\treturn item;\r\n\t\t}\r\n\t\t//TODO let's leave it out for now\r\n\t\t//public override bool Equals(object other) { return Equals(other as B); }\r\n\t\tpublic bool Equals(B other)\r\n\t\t{\r\n\t\t\treturn (this as IEquatable<IEntity>).Equals(other)\r\n\t\t\t\t&& other.URI == this.URI\r\n\r\n\t\t\t\t&& other.ID == this.ID\r\n\t\t\t\t&& this._aURI == other._aURI\r\n\t\t\t\t&& other.aID == this.aID\r\n\t\t\t;\r\n\t\t}\r\n\r\n\t\t[DataMember(EmitDefaultValue=false,Name=\"ID\")]\r\n\t\tinternal int _ID  = NumberCounter<B>.GetNextTempInt();\r\n\r\n\t\tpublic int ID\r\n\t\t{\r\n\r\n\t\t\tget\r\n\t\t\t{\r\n\r\n\t\t\t\treturn this._ID;\r\n\t\t\t}\r\n\t\t\tinternal\r\n\t\t\tset\r\n\t\t\t{\r\n\r\n\t\t\t\tthis._ID = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tDictionary<System.Type, IEnumerable<string>> ICacheable.GetRelationships()\r\n\t\t{\r\n\r\n\t\t\tvar result = new List<KeyValuePair<System.Type, string>>();\r\n\r\n\t\t\tresult.AddRange(\r\n\t\t\t\tfrom it in new [] { this }\r\n\t\t\t\tlet it_a = it.aURI\r\n\t\t\t\twhere it_a != null\r\n\t\t\t\tselect new KeyValuePair<System.Type, string>(typeof(myModule.A), it_a));\r\n\t\t\treturn result.GroupBy(it => it.Key).ToDictionary(it => it.Key, it => it.Select(e => e.Value));\r\n\r\n\t\t}\r\n\r\n\t\tpublic static event Action<B> Validating = a => {};\r\n\t\tpublic void Validate()\r\n\t\t{\r\n\t\t\tValidating(this);\r\n\t\t}\r\n\t\tinternal Lazy<IDataCache<myModule.A>> __DataCachea;\r\n\r\n\t\tinternal string _aURI;\r\n\t\t[DataMember]\r\n\t\tpublic string aURI\r\n\t\t{\r\n\t\t\tget { return _aURI; }\r\n\t\t\tprivate set { _aURI = value; } //TODO: fakin serialization\r\n\t\t}\r\n\r\n\t\tinternal myModule.A _a ;\r\n\r\n\t\tpublic myModule.A a\r\n\t\t{\r\n\r\n\t\t\tget\r\n\t\t\t{\r\n\r\n\t\t\t\tif (_a != null && _a.URI != _aURI || _a == null && _aURI != null)\r\n\t\t\t\t\tif(__DataCachea != null)\r\n\t\t\t\t\t\t_a = __DataCachea.Value.Find(_aURI);\r\n\r\n\t\t\t\tif (_aURI == null && _a != null)\r\n\t\t\t\t\t_a = null;\r\n\t\t\t\treturn this._a;\r\n\t\t\t}\r\n\r\n\t\t\tset\r\n\t\t\t{\r\n\r\n\t\t\t\tif(value == null)\r\n\t\t\t\t\tthrow new ArgumentNullException(\"Property a can't be null\");\r\n\t\t\t\tthis._a = value;\r\n\r\n\t\t\t\t_aURI = value != null ? value.URI : null;\r\n\r\n\t\t\t\tif(value == null)\r\n\t\t\t\t\tthrow new ArgumentException(\"Property aID doesn't allow null values\");\r\n\t\t\t\telse if(aID != value.ID)\r\n\t\t\t\t\taID = value.ID;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t[DataMember(EmitDefaultValue=false,Name=\"aID\")]\r\n\t\tinternal int _aID ;\r\n\r\n\t\tpublic int aID\r\n\t\t{\r\n\r\n\t\t\tget\r\n\t\t\t{\r\n\r\n\t\t\t\treturn this._aID;\r\n\t\t\t}\r\n\t\t\tinternal\r\n\t\t\tset\r\n\t\t\t{\r\n\r\n\t\t\t\tthis._aID = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tinternal B __OriginalValue;\r\n\t\tB IChangeTracking<B>.GetOriginalValue()\r\n\t\t{\r\n\t\t\treturn __OriginalValue;\r\n\t\t}\r\n\r\n\t\tvoid global::NGS.Serialization.IJsonObject.Serialize(System.IO.StreamWriter sw, Action<System.IO.StreamWriter, object> serializer)\r\n\t\t{\r\n\r\n\t\t\tsw.Write('{');\r\n\t\t\t__SerializeJsonObject(sw, new char[36], serializer, false);\r\n\t\t\tsw.Write('}');\r\n\t\t}\r\n\r\n\t\tinternal void __SerializeJsonObject(System.IO.StreamWriter sw, char[] buffer, Action<System.IO.StreamWriter, object> serializer, bool hasWrittenProperty = false)\r\n\t\t{\r\n\r\n\t\t\tif(hasWrittenProperty) sw.Write(',');\r\n\t\t\tsw.Write(\"\\\"URI\\\":\");\r\n\t\t\tglobal::NGS.Serialization.Json.Converters.StringConverter.Serialize(URI, sw);\r\n\r\n\t\t\t\tvar __expID = this.ID;\r\n\t\t\t\tif (__expID != default(int))\r\n\t\t\t\t{\r\n\t\t\t\t\tsw.Write(\",\\\"ID\\\":\");\r\n\t\t\t\t\tglobal::NGS.Serialization.Json.Converters.NumberConverter.Serialize(__expID, sw, buffer);\r\n\t\t\t\t}\r\n\r\n\t\t\tif(aURI != null)\r\n\t\t\t{\r\n\t\t\t\tsw.Write(\",\\\"aURI\\\":\");\r\n\t\t\t\tglobal::NGS.Serialization.Json.Converters.StringConverter.Serialize(_aURI, sw);\r\n\t\t\t}\r\n\r\n\t\t\t\tvar __expaID = this.aID;\r\n\t\t\t\tif (__expaID != default(int))\r\n\t\t\t\t{\r\n\t\t\t\t\tsw.Write(\",\\\"aID\\\":\");\r\n\t\t\t\t\tglobal::NGS.Serialization.Json.Converters.NumberConverter.Serialize(__expaID, sw, buffer);\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","CSharpServer/_DatabaseCommon.FactorymyModule_B.BConverter.cs":"\r\nnamespace _DatabaseCommon.FactorymyModule_B\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tusing System.Globalization;\r\n\tusing System.IO;\r\n\tusing NGS.DatabasePersistence;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Utility;\r\n\r\n\tinternal class BConverter : IPostgresTypeConverter\r\n\t{\r\n\t\tpublic object CreateInstance(object value, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tif (value == null)\r\n\t\t\t\treturn null;\r\n\t\t\tusing(var sr = value as System.IO.TextReader ?? new System.IO.StringReader(value as string ?? value.ToString()))\r\n\t\t\t{\r\n\t\t\t\treturn CreateFromRecord(sr, 0, locator);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic PostgresTuple ToTuple(object instance)\r\n\t\t{\r\n\t\t\treturn CreateTupleFrom(instance as myModule.B);\r\n\t\t}\r\n\r\n\t\tpublic static RecordTuple CreateExtendedTupleFrom(myModule.B item)\r\n\t\t{\r\n\t\t\tif(item == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar items = new PostgresTuple[ExtendedColumnCount];\r\n\r\n\t\t\titems[ExtendedProperty_URI_Index] = new ValueTuple(item.URI);\r\n\t\t\titems[ExtendedProperty_ID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.ID);\r\n\t\t\titems[ExtendedProperty_aURI_Index] = new ValueTuple(item.aURI);\r\n\t\t\titems[ExtendedProperty_aID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.aID);\r\n\t\t\treturn new RecordTuple(items);\r\n\t\t}\r\n\r\n\t\tpublic static RecordTuple CreateTupleFrom(myModule.B item)\r\n\t\t{\r\n\t\t\tif(item == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar items = new PostgresTuple[ColumnCount];\r\n\r\n\t\t\titems[Property_URI_Index] = new ValueTuple(item.URI);\r\n\t\t\titems[Property_ID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.ID);\r\n\t\t\titems[Property_aURI_Index] = new ValueTuple(item.aURI);\r\n\t\t\titems[Property_aID_Index] = _DatabaseCommon.Utility.IntegerToTuple(item.aID);\r\n\t\t\treturn new RecordTuple(items);\r\n\t\t}\r\n\r\n\t\tprivate static int ColumnCount;\r\n\t\tprivate static int ExtendedColumnCount;\r\n\r\n\t\tinternal static void InitializeProperties(System.Data.DataTable columnsInfo)\r\n\t\t{\r\n\t\t\tSystem.Data.DataRow row = null;\r\n\r\n\t\t\tColumnCount = columnsInfo.Select(\"type_schema = 'myModule' AND type_name = 'B_entity'\").Length;\r\n\t\t\tExtendedColumnCount = columnsInfo.Select(\"type_schema = 'myModule' AND type_name = '-ngs_B_type-'\").Length;\r\n\r\n\t\t\tReaderConfiguration = new Action<myModule.B, TextReader, int, IServiceLocator>[ColumnCount > 0 ? ColumnCount : 1];\r\n\t\t\tReaderExtendedConfiguration = new Action<myModule.B, TextReader, int, IServiceLocator>[ExtendedColumnCount > 0 ? ExtendedColumnCount : 1];\r\n\t\t\tfor(int i = 0;i < ColumnCount; i++)\r\n\t\t\t\tReaderConfiguration[i] = (agg, tr, c, sl) => StringConverter.Skip(tr, c);\r\n\t\t\tif(ColumnCount != ReaderConfiguration.Length)\r\n\t\t\t\tReaderConfiguration[0] = (agg, tr, c, sl) => tr.Read();\r\n\t\t\tfor(int i = 0;i < ExtendedColumnCount; i++)\r\n\t\t\t\tReaderExtendedConfiguration[i] = (agg, tr, c, sl) => StringConverter.Skip(tr, c);\r\n\t\t\tif(ExtendedColumnCount != ReaderExtendedConfiguration.Length)\r\n\t\t\t\tReaderExtendedConfiguration[0] = (agg, tr, c, sl) => tr.Read();\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"B_entity\", \"URI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column URI in type myModule.B_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_URI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_B_type-\", \"URI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column URI in type myModule.B. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_URI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_URI_Index] = (item, reader, context, locator) => item.URI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_URI_Index] = (item, reader, context, locator) => item.URI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"B_entity\", \"ID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column ID in type myModule.B_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_ID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_ID_Index] = (item, reader, context, locator) => item._ID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_B_type-\", \"ID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column ID in type myModule.B. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_ID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_ID_Index] = (item, reader, context, locator) => item._ID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"B_entity\", \"aURI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column aURI in type myModule.B_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_aURI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_B_type-\", \"aURI\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column aURI in type myModule.B. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_aURI_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_aURI_Index] = (item, reader, context, locator) => item._aURI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_aURI_Index] = (item, reader, context, locator) => item._aURI = StringConverter.Parse(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"B_entity\", \"aID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column aID in type myModule.B_entity. Check if database is out of sync with code\");\r\n\t\t\tProperty_aID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderConfiguration[Property_aID_Index] = (item, reader, context, locator) => item._aID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t\trow = columnsInfo.Rows.Find(new[] { \"myModule\", \"-ngs_B_type-\", \"aID\" });\r\n\t\t\tif(row == null)\r\n\t\t\t\tthrow new System.Configuration.ConfigurationException(\"Couldn't find column aID in type myModule.B. Check if database is out of sync with code\");\r\n\t\t\tExtendedProperty_aID_Index = (short)row[\"column_index\"] - 1;\r\n\r\n\t\t\tReaderExtendedConfiguration[ExtendedProperty_aID_Index] = (item, reader, context, locator) => item._aID = _DatabaseCommon.Utility.ParseInt(reader, context);\r\n\r\n\t\t}\r\n\r\n\t\tprivate static Action<myModule.B, TextReader, int, IServiceLocator>[] ReaderConfiguration;\r\n\t\tprivate static Action<myModule.B, TextReader, int, IServiceLocator>[] ReaderExtendedConfiguration;\r\n\r\n\t\tpublic static myModule.B CreateFromRecord(TextReader reader, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tvar cur = reader.Read();\r\n\t\t\tif (cur == ',' || cur == ')')\r\n\t\t\t\treturn null;\r\n\t\t\tvar result = CreateFromRecord(reader, context, context == 0 ? 1 : context << 1, locator);\r\n\t\t\treader.Read();\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.B CreateFromRecord(TextReader reader, int outerContext, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\t\t\tvar item = new myModule.B();\r\n\t\t\tforeach (var config in ReaderConfiguration)\r\n\t\t\t\tconfig(item, reader, context, locator);\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\r\n\t\t\titem.__DataCachea = new Lazy<IDataCache<myModule.A>>(() => locator.Resolve<IDataCache<myModule.A>>());\r\n\t\t\titem.__OriginalValue = item.Clone();\r\n\t\t\treturn item;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.B CreateFromExtendedRecord(TextReader reader, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tvar cur = reader.Read();\r\n\t\t\tif (cur == ',' || cur == ')')\r\n\t\t\t\treturn null;\r\n\t\t\tvar result = CreateFromExtendedRecord(reader, context, context == 0 ? 1 : context << 1, locator);\r\n\t\t\treader.Read();\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tpublic static myModule.B CreateFromExtendedRecord(TextReader reader, int outerContext, int context, IServiceLocator locator)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\t\t\tvar item = new myModule.B();\r\n\t\t\tforeach (var config in ReaderExtendedConfiguration)\r\n\t\t\t\tconfig(item, reader, context, locator);\r\n\t\t\tfor (int i = 0; i < outerContext; i++)\r\n\t\t\t\treader.Read();\r\n\r\n\t\t\titem.__DataCachea = new Lazy<IDataCache<myModule.A>>(() => locator.Resolve<IDataCache<myModule.A>>());\r\n\t\t\titem.__OriginalValue = item.Clone();\r\n\t\t\treturn item;\r\n\t\t}\r\n\r\n\t\tprivate static int Property_URI_Index;\r\n\t\tprivate static int ExtendedProperty_URI_Index;\r\n\t\tinternal static List<int> OptionalEntityReferences = new List<int>();\r\n\t\tprivate static int Property_ID_Index;\r\n\t\tprivate static int ExtendedProperty_ID_Index;\r\n\r\n\t\tinternal static string BuildURI(int ID)\r\n\t\t{\r\n\t\t\treturn _DatabaseCommon.Utility.IntegerToString(ID);\r\n\t\t}\r\n\r\n\t\tinternal static void ParseURI(IServiceLocator locator, string URI, out int ID)\r\n\t\t{\r\n\r\n\t\t\tID = _DatabaseCommon.Utility.ToInt(URI);\r\n\t\t}\r\n\t\tprivate static int Property_aURI_Index;\r\n\t\tprivate static int ExtendedProperty_aURI_Index;\r\n\t\tprivate static int Property_aID_Index;\r\n\t\tprivate static int ExtendedProperty_aID_Index;\r\n\t}\r\n}\r\n","CSharpServer/DatabaseRepositorymyModule.BRepository.cs":"\r\nnamespace DatabaseRepositorymyModule\r\n{\r\n\tusing System;\r\n\tusing System.Collections.Generic;\r\n\tusing System.Linq;\r\n\tusing System.Linq.Expressions;\r\n\tusing System.Text;\r\n\tusing System.Threading;\r\n\tusing System.Runtime.Serialization;\r\n\tusing NGS;\r\n\tusing NGS.DomainPatterns;\r\n\tusing NGS.Extensibility;\r\n\r\n\tusing NGS.Utility;\r\n\tusing System.IO;\r\n\r\n\tusing NGS.DatabasePersistence;\r\n\tusing NGS.DatabasePersistence.Postgres;\r\n\tusing NGS.DatabasePersistence.Postgres.Converters;\r\n\tusing NGS.DatabasePersistence.Postgres.QueryGeneration;\r\n\r\n\tinternal static class RegisterB\r\n\t{\r\n\t\tpublic static void Register(IObjectFactory factory)\r\n\t\t{\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository));\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository), typeof(IQueryableRepository<myModule.B>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterFunc<IQueryable<myModule.B>>(f => f.Resolve<IQueryableRepository<myModule.B>>().Query<myModule.B>(null));\r\n\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository), typeof(IRepository<myModule.B>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterFunc<Func<string, myModule.B>>(f => f.Resolve<IRepository<myModule.B>>().Find);\r\n\t\t\tfactory.RegisterFunc<Func<IEnumerable<string>, myModule.B[]>>(f => f.Resolve<IRepository<myModule.B>>().Find);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository), typeof(IPersistableRepository<myModule.B>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository), typeof(IPersistableRepository<myModule.B>), InstanceScope.Context);\r\n\t\t\tfactory.RegisterType(typeof(DatabaseRepositorymyModule.BRepository), typeof(IAggregateRootRepository<myModule.B>), InstanceScope.Context);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tinternal partial class BRepository : IQueryableRepository<myModule.B>, System.IDisposable, IRepository<myModule.B>, IPersistableRepository<myModule.B>, IAggregateRootRepository<myModule.B>\r\n\t{\r\n\r\n\t\tprivate readonly IServiceLocator Locator;\r\n\t\tprivate readonly IDatabaseQuery DatabaseQuery;\r\n\r\n\t\tpublic BRepository(IServiceLocator locator, IDatabaseQuery query, IEagerNotification Notifications)\r\n\r\n\t\t{\r\n\r\n\t\t\tthis.Locator = locator;\r\n\t\t\tthis.DatabaseQuery = query;\r\n\r\n\t\t\tthis.Notifications = Notifications;\r\n\t\t\tDataCache = new WeakCache<myModule.B>(this);\r\n\t\t}\r\n\r\n\t\tpublic void Dispose()\r\n\t\t{\r\n\r\n\t\t\tif (!DatabaseQuery.InTransaction)\r\n\t\t\t{\r\n\t\t\t\tNotifyInfo ni;\r\n\t\t\t\twhile (NotifyQueue.TryDequeue(out ni))\r\n\t\t\t\t\tNotifications.Notify(ni);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic IQueryable<myModule.B> Query<TCondition>(ISpecification<TCondition> specification)\r\n\t\t{\r\n\t\t\tif(specification != null && specification.IsSatisfied == null)\r\n\t\t\t\tthrow new ArgumentException(\"Search predicate is not specified\");\r\n\t\t\tif(specification != null && !typeof(TCondition).IsAssignableFrom(typeof(myModule.B)))\r\n\t\t\t\tthrow new ArgumentException(\"Specification is not compatible\");\r\n\r\n\t\t\tIQueryable<myModule.B> data = new Queryable<myModule.B>(new QueryExecutor(DatabaseQuery, Locator));\r\n\t\t\tbool rewritten = false;\r\n\r\n\t\t\tif(!rewritten && specification != null)\r\n\t\t\t{\r\n\t\t\t\tvar specAsNative = specification as ISpecification<myModule.B>;\r\n\t\t\t\tif(specAsNative != null)\r\n\t\t\t\t\tdata = data.Where(specAsNative.IsSatisfied);\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = data.Cast<TCondition>().Where(specification.IsSatisfied).Cast<myModule.B>();\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\tpublic myModule.B[] Search<TCondition>(ISpecification<TCondition> specification, int? limit, int? offset)\r\n\t\t{\r\n\t\t\tif(specification != null && specification.IsSatisfied == null)\r\n\t\t\t\tthrow new ArgumentException(\"Search predicate is not specified\");\r\n\r\n\t\t\tbool rewritten = false;\r\n\t\t\tvar result = new List<myModule.B>();\r\n\r\n\t\t\tif(!rewritten)\r\n\t\t\t{\r\n\t\t\t\tvar query = Query(specification);\r\n\t\t\t\tif (limit != null && limit.Value >= 0)\r\n\t\t\t\t\tquery = query.Take(limit.Value);\r\n\t\t\t\tif (offset != null && offset.Value >= 0)\r\n\t\t\t\t\tquery = query.Skip(offset.Value);\r\n\t\t\t\tresult.AddRange(query);\r\n\t\t\t}\r\n\r\n\t\t\treturn result.ToArray();\r\n\t\t}\r\n\r\n\t\tpublic myModule.B[] Find(IEnumerable<string> uris)\r\n\t\t{\r\n\t\t\tif(uris == null || !uris.Any(it => it != null))\r\n\t\t\t\treturn new myModule.B[0];\r\n\r\n\t\t\tvar pks = uris.Where(it => it != null).ToList();\r\n\t\t\tvar formattedUris = NGS.DatabasePersistence.Postgres.PostgresRecordConverter.BuildSimpleUriList(pks);\r\n\t\t\tvar result = new List<myModule.B>(pks.Count);\r\n\t\t\tDatabaseQuery.Execute(\r\n\t\t\t\t@\"SELECT r FROM \"\"myModule\"\".\"\"B_entity\"\" r WHERE r.\"\"ID\"\" IN (\" + formattedUris + \")\",\r\n\t\t\t\tdr =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar _pg = dr.GetValue(0);\r\n\t\t\t\t\tusing(var _tr = _pg as System.IO.TextReader ?? new System.IO.StringReader(_pg as string))\r\n\t\t\t\t\t\tresult.Add(_DatabaseCommon.FactorymyModule_B.BConverter.CreateFromRecord(_tr, 0, Locator));\r\n\t\t\t\t});\r\n\r\n\t\t\treturn result.ToArray();\r\n\t\t}\r\n\r\n\t\tprivate readonly WeakCache<myModule.B> DataCache;\r\n\t\tprivate readonly System.Collections.Concurrent.ConcurrentQueue<NotifyInfo> NotifyQueue = new System.Collections.Concurrent.ConcurrentQueue<NotifyInfo>();\r\n\t\tprivate readonly IEagerNotification Notifications;\r\n\r\n\t\tpublic string[] Persist(IEnumerable<myModule.B> insert, IEnumerable<KeyValuePair<myModule.B, myModule.B>> update, IEnumerable<myModule.B> delete)\r\n\t\t{\r\n\t\t\tvar insertedData = insert != null ? insert.ToArray() : new myModule.B[0];\r\n\t\t\tvar updatedData = update != null ? update.ToList() : new List<KeyValuePair<myModule.B, myModule.B>>();\r\n\t\t\tvar deletedData = delete != null ? delete.ToArray() : new myModule.B[0];\r\n\r\n\t\t\tif(insertedData.Length == 0 && updatedData.Count == 0 && deletedData.Length == 0)\r\n\t\t\t\treturn new string[0];\r\n\r\n\t\t\tif (updatedData.Count > 0 && updatedData.Any(it => it.Key == null))\r\n\t\t\t{\r\n\t\t\t\t//TODO fetch only null values\r\n\t\t\t\tvar oldValues = Find(updatedData.Select(it => it.Value.URI)).ToDictionary(it => it.URI);\r\n\t\t\t\tif (oldValues.Count != updatedData.Count)\r\n\t\t\t\t\tthrow new ArgumentException(\"Can't find update value. Requested: {0}, found: {1}. Missing: {2}\".With(\r\n\t\t\t\t\t\tupdatedData.Count,\r\n\t\t\t\t\t\toldValues.Count,\r\n\t\t\t\t\t\tstring.Join(\", \", updatedData.Select(it => it.Value.URI).Except(oldValues.Keys))));\r\n\t\t\t\tmyModule.B _val;\r\n\t\t\t\tfor(int i = 0; i < updatedData.Count; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t_val = updatedData[i].Value;\r\n\t\t\t\t\tupdatedData[i] = new KeyValuePair<myModule.B, myModule.B>(oldValues[_val.URI], _val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tupdatedData.RemoveAll(kv => kv.Key.Equals(kv.Value));\r\n\r\n\t\t\tDatabaseQuery.Fill<myModule.B, int>(insertedData, @\"nextval('\"\"myModule\"\".\"\"B_ID_seq\"\"'::regclass)::int\", (it, seq) => it.ID = seq);\r\n\r\n\t\t\tforeach(var it in insertedData)\r\n\t\t\t\tit.Validate();\r\n\t\t\tforeach(var it in updatedData)\r\n\t\t\t\tit.Value.Validate();\r\n\t\t\tforeach(var it in deletedData)\r\n\t\t\t\tit.Validate();\r\n\t\t\tfor(int i = 0; i < insertedData.Length; i++)\r\n\t\t\t\tinsertedData[i].__InternalPrepareInsert();\r\n\t\t\tforeach(var it in updatedData)\r\n\t\t\t\tit.Value.__InternalPrepareUpdate();\r\n\t\t\tfor(int i = 0; i < deletedData.Length; i++)\r\n\t\t\t\tdeletedData[i].__InternalPrepareDelete();\r\n\r\n\t\t\tfor(int i = 0; i < insertedData.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar it = insertedData[i];\r\n\t\t\t\tit.__ReapplyReferences();\r\n\t\t\t\tit.URI = _DatabaseCommon.FactorymyModule_B.BConverter.BuildURI(it.ID);\r\n\t\t\t\tif(it.aID != null) it._aURI = _DatabaseCommon.FactorymyModule_A.AConverter.BuildURI(it.aID);\r\n\t\t\t}\r\n\t\t\tforeach(var kv in updatedData)\r\n\t\t\t{\r\n\t\t\t\tkv.Value.__ReapplyReferences();\r\n\t\t\t\tkv.Value.URI = _DatabaseCommon.FactorymyModule_B.BConverter.BuildURI(kv.Value.ID);\r\n\t\t\t\tif(kv.Value.aID != null) kv.Value._aURI = _DatabaseCommon.FactorymyModule_A.AConverter.BuildURI(kv.Value.aID);\r\n\t\t\t}\r\n\r\n\t\t\t_InternalDoPersist(insertedData, updatedData, deletedData);\r\n\t\t\tvar resultURI = new string[insertedData.Length];\r\n\t\t\tfor(int i = 0; i < resultURI.Length; i++)\r\n\t\t\t\tresultURI[i] = insertedData[i].URI;\r\n\r\n\t\t\tif (DatabaseQuery.InTransaction)\r\n\t\t\t{\r\n\t\t\t\tif (insertedData.Length > 0) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Insert, resultURI));\r\n\t\t\t\tif (updatedData.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNotifyQueue.Enqueue(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Update, updatedData.Select(it => it.Key.URI).ToArray()));\r\n\t\t\t\t\tif (updatedData.Any(kv => kv.Key.URI != kv.Value.URI)) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Change, updatedData.Where(kv => kv.Key.URI != kv.Value.URI).Select(it => it.Value.URI).ToArray()));\r\n\t\t\t\t}\r\n\t\t\t\tif (deletedData.Length > 0) NotifyQueue.Enqueue(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Delete, deletedData.Select(it => it.URI).ToArray()));\r\n\t\t\t\tDataCache.Invalidate(updatedData.Select(it => it.Key.URI).Union(deletedData.Select(it => it.URI)));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (insertedData.Length > 0) Notifications.Notify(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Insert, resultURI));\r\n\t\t\t\tif (updatedData.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNotifications.Notify(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Update, updatedData.Select(it => it.Key.URI).ToArray()));\r\n\t\t\t\t\tif (updatedData.Any(kv => kv.Key.URI != kv.Value.URI)) Notifications.Notify(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Change, updatedData.Where(kv => kv.Key.URI != kv.Value.URI).Select(it => it.Value.URI).ToArray()));\r\n\t\t\t\t}\r\n\t\t\t\tif (deletedData.Length > 0) Notifications.Notify(new NotifyInfo(\"myModule.B\", NotifyInfo.OperationEnum.Delete, deletedData.Select(it => it.URI).ToArray()));\r\n\t\t\t}\r\n\r\n\t\t\treturn resultURI;\r\n\t\t}\r\n\r\n\t\tprivate readonly IPostgresTypeConverter TypeConverter = new _DatabaseCommon.FactorymyModule_B.BConverter();\r\n\r\n\t\tprivate void _InternalDoPersist(myModule.B[] insertedData, List<KeyValuePair<myModule.B, myModule.B>> updatedData, myModule.B[] deletedData)\r\n\t\t{\r\n\t\t\tusing(var cms = ChunkedMemoryStream.Create())\r\n\t\t\t{\r\n\t\t\t\tvar sw = cms.GetWriter();\r\n\t\t\t\tsw.Write(\"SELECT \\\"myModule\\\".\\\"persist_B\\\"(\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, insertedData, _DatabaseCommon.FactorymyModule_B.BConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"B_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, updatedData.Select(it => it.Key), _DatabaseCommon.FactorymyModule_B.BConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"B_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, updatedData.Select(it => it.Value), _DatabaseCommon.FactorymyModule_B.BConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"B_entity\"\"[],\");\r\n\t\t\t\tPostgresTypedArray.ToArray(sw, deletedData, _DatabaseCommon.FactorymyModule_B.BConverter.CreateTupleFrom);\r\n\t\t\t\tsw.Write(@\"::\"\"myModule\"\".\"\"B_entity\"\"[]\");\r\n\r\n\t\t\t\tsw.Write(\")\");\r\n\r\n\t\t\t\tsw.Flush();\r\n\t\t\t\tcms.Position = 0;\r\n\t\t\t\tvar com = new Npgsql.NpgsqlCommand(cms);\r\n\t\t\t\tDatabaseQuery.Execute(com);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmyModule.B[] IAggregateRootRepository<myModule.B>.Create(int count, Action<myModule.B[]> initialize)\r\n\t\t{\r\n\t\t\tif(count < 0)\r\n\t\t\t\tthrow new ArgumentException(\"count must be positive: Provided value \" + count);\r\n\t\t\tvar roots = new myModule.B[count];\r\n\t\t\tfor(int i = 0; i < count; i++)\r\n\t\t\t\troots[i] = new myModule.B();\r\n\t\t\tif(initialize != null)\r\n\t\t\t\tinitialize(roots);\r\n\t\t\tPersist(roots, null, null);\r\n\t\t\treturn roots;\r\n\t\t}\r\n\r\n\t\tmyModule.B[] IAggregateRootRepository<myModule.B>.Update(string[] uris, Action<myModule.B[]> change)\r\n\t\t{\r\n\t\t\tvar roots = Find(uris);\r\n\t\t\tif(roots.Length != uris.Length)\r\n\t\t\t\tthrow new ArgumentException(\"Can't find myModule.B with uri: \".With(string.Join(\", \", uris)));\r\n\t\t\tif(change != null)\r\n\t\t\t{\r\n\t\t\t\tvar originals = roots.Select(it => it.Clone()).ToDictionary(it => it.URI);\r\n\t\t\t\tchange(roots);\r\n\t\t\t\tPersist(null, roots.Select(it => new KeyValuePair<myModule.B, myModule.B>(originals[it.URI], it)).ToList(), null);\r\n\t\t\t}\r\n\t\t\treturn roots;\r\n\t\t}\r\n\r\n\t\tvoid IAggregateRootRepository<myModule.B>.Delete(string[] uris)\r\n\t\t{\r\n\t\t\tvar roots = Find(uris);\r\n\t\t\tif(roots.Length != uris.Length)\r\n\t\t\t\tthrow new ArgumentException(\"Can't find myModule.B with uri: \".With(string.Join(\", \", uris)));\r\n\t\t\tPersist(null, null, roots);\r\n\t\t}\r\n\r\n\t\tIQueryable<myModule.B> IQueryableRepository<myModule.B>.Query<TCondition>(ISpecification<TCondition> specification)\r\n\t\t{\r\n\t\t\treturn Query(specification);\r\n\t\t}\r\n\r\n\t\tmyModule.B[] IQueryableRepository<myModule.B>.Search<TCondition>(ISpecification<TCondition> specification, int? limit, int? offset)\r\n\t\t{\r\n\t\t\treturn Search(specification, limit, offset);\r\n\t\t}\r\n\r\n\t\tmyModule.B[] IRepository<myModule.B>.Find(IEnumerable<string> uris) { return Find(uris); }\r\n\t}\r\n\r\n}\r\n","Scala/namespace.myModule.A.scala":"package namespace.myModule\r\n\r\nimport com.dslplatform.api.patterns._\r\nimport com.dslplatform.api.client._\r\nimport scala.concurrent.{Await, Future, ExecutionContext}\r\nimport scala.concurrent.duration.Duration\r\n\r\n\r\n\r\n\r\nclass A @com.fasterxml.jackson.annotation.JsonIgnore()  private(\r\n\t  private var _URI: String,\r\n\t  @transient private var __locator: Option[ServiceLocator],\r\n\t  private var _ID: Int\r\n\t) extends Serializable with AggregateRoot {\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tdef URI = { \r\n\t\t_URI\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def URI_= (value: String) { \r\n\t\t_URI = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\toverride def hashCode = URI.hashCode\r\n\toverride def equals(o: Any) = o match {\r\n\t\tcase c: A => c.URI == URI\r\n\t\tcase _ => false\r\n\t}\r\n\r\n\toverride def toString = \"A(\"+ URI +\")\"\r\n\t\r\n\t\t\r\n\t def copy(): A = {\r\n\t\t\r\n\r\n\t\t\t\r\n\t\tnew A(_URI = this.URI, __locator = this.__locator, _ID = _ID)\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private def this(\r\n\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"__locator\") __locator: ServiceLocator\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"URI\") URI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"ID\") ID: Int\r\n\t) =\r\n\t  this(__locator = Some(__locator), _URI = URI, _ID = ID)\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\tdef ID = { \r\n\t\t_ID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def ID_= (value: Int) { \r\n\t\t_ID = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonIgnore\r\n\tdef isNewAggregate() = __locator == None || _URI == null\r\n\t\r\n\r\n\tprivate def updateWithAnother(result: namespace.myModule.A): this.type = {\r\n\t\tthis._URI = result._URI\r\n\t\tthis._ID = result._ID\r\n\t\tthis\r\n\t}\r\n\r\n\tprivate def create()(implicit locator: ServiceLocator, ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t__locator = Some(if (locator ne null) locator else Bootstrap.getLocator)\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).create(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def update()(implicit ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).update(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def delete()(implicit ec: ExecutionContext, duration: Duration) = {\r\n\t\tif (__locator.isEmpty) throw new IllegalArgumentException(\"Can't delete aggregate before it's saved\")\r\n\t\tAwait.result(__locator.get.resolve(classOf[CrudProxy]).delete[namespace.myModule.A](URI), duration)\r\n\t}\r\n\r\n\r\n}\r\n\r\nobject A extends AggregateRootCompanion[A]{\r\n\r\n\tdef apply(\r\n\t) = {\r\n\t\tnew A(\r\n\t\t\t__locator = None\r\n\t\t, _URI = java.util.UUID.randomUUID.toString\r\n\t\t, _ID = 0)\r\n\t}\r\n\r\n\t\r\n}\r\n","Scala/namespace.myModule.B.scala":"package namespace.myModule\r\n\r\nimport com.dslplatform.api.patterns._\r\nimport com.dslplatform.api.client._\r\nimport scala.concurrent.{Await, Future, ExecutionContext}\r\nimport scala.concurrent.duration.Duration\r\n\r\n\r\n\r\n\r\nclass B @com.fasterxml.jackson.annotation.JsonIgnore()  private(\r\n\t  private var _URI: String,\r\n\t  @transient private var __locator: Option[ServiceLocator],\r\n\t  private var _ID: Int,\r\n\t  @transient private var _a: namespace.myModule.A,\r\n\t  private var _aURI: String,\r\n\t  private var _aID: Int\r\n\t) extends Serializable with AggregateRoot {\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tdef URI = { \r\n\t\t_URI\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def URI_= (value: String) { \r\n\t\t_URI = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\toverride def hashCode = URI.hashCode\r\n\toverride def equals(o: Any) = o match {\r\n\t\tcase c: B => c.URI == URI\r\n\t\tcase _ => false\r\n\t}\r\n\r\n\toverride def toString = \"B(\"+ URI +\")\"\r\n\t\r\n\t\t\r\n\t def copy(a: namespace.myModule.A = null): B = {\r\n\t\t\r\n\r\n\t\t\t\r\n\t\tnew B(_URI = this.URI, __locator = this.__locator, _ID = _ID, _a = if(a != null) a else _a, _aURI = if (a != null) a.URI else this._aURI, _aID = if(a != null) a.ID else this._aID)\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private def this(\r\n\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"__locator\") __locator: ServiceLocator\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"URI\") URI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"ID\") ID: Int\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"aURI\") aURI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"aID\") aID: Int\r\n\t) =\r\n\t  this(__locator = Some(__locator), _URI = URI, _ID = ID, _aURI = if (aURI == null) \"\" else aURI, _a = null, _aID = aID)\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\tdef ID = { \r\n\t\t_ID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def ID_= (value: Int) { \r\n\t\t_ID = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonIgnore\r\n\tdef isNewAggregate() = __locator == None || _URI == null\r\n\t\r\n\r\n\tprivate def updateWithAnother(result: namespace.myModule.B): this.type = {\r\n\t\tthis._URI = result._URI\r\n\t\tthis._a = result._a\r\n\t\tthis._aURI = result._aURI\r\n\t\tthis._aID = result._aID\r\n\t\tthis._ID = result._ID\r\n\t\tthis\r\n\t}\r\n\r\n\tprivate def create()(implicit locator: ServiceLocator, ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t\r\n\t\tif (this.aURI == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot persist instance of 'namespace.myModule.B' because reference 'a' was not assigned\");\r\n\t\t}\r\n\t\t__locator = Some(if (locator ne null) locator else Bootstrap.getLocator)\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).create(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def update()(implicit ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t\r\n\t\tif (this.aURI == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot persist instance of 'namespace.myModule.B' because reference 'a' was not assigned\");\r\n\t\t}\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).update(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def delete()(implicit ec: ExecutionContext, duration: Duration) = {\r\n\t\tif (__locator.isEmpty) throw new IllegalArgumentException(\"Can't delete aggregate before it's saved\")\r\n\t\tAwait.result(__locator.get.resolve(classOf[CrudProxy]).delete[namespace.myModule.B](URI), duration)\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n\tdef a(implicit ec: ExecutionContext, duration: Duration) = { \r\n\tif(__locator.isDefined) {\r\n\t\t\tif (__locator.isDefined && (_a == null || _a.URI != aURI))\r\n\t\t\t\t_a = Await.result(__locator.get.resolve(classOf[CrudProxy]).read[namespace.myModule.A](aURI), duration)\r\n\t\t}\t\t\t\r\n\t\t_a\r\n\t}\r\n\r\n\t\r\n\tdef a_= (value: namespace.myModule.A) { \r\n\t\t_a = value\r\n\t\t\r\n\t\t_aURI = value.URI\r\n\t\t\r\n\t\tif(aID != value.ID)\r\n\t\t\taID = value.ID\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"aURI\")\r\n\tdef aURI = {\r\n\t\t\r\n\t\t_aURI\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"aID\")\r\n\t def aID = { \r\n\t\t_aID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def aID_= (value: Int) { \r\n\t\t_aID = value\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\nobject B extends AggregateRootCompanion[B]{\r\n\r\n\tdef apply(\r\n\t\ta: namespace.myModule.A\r\n\t) = {\r\n\t\trequire(a ne null, \"Null value was provided for property \\\"a\\\"\")\r\n\t\tnew B(\r\n\t\t\t__locator = None\r\n\t\t, _URI = java.util.UUID.randomUUID.toString\r\n\t\t, _ID = 0\r\n\t\t, _a = a\r\n\t\t, _aURI = a.URI\r\n\t\t, _aID = a.ID)\r\n\t}\r\n\r\n\t\r\n}\r\n"}
