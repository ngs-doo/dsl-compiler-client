{"Java/namespace.Guards.java":"package namespace;\r\n\r\nimport java.util.*;\r\nimport java.math.BigDecimal;\r\n\r\npublic final class Guards   {\r\n\r\n\tpublic static <T> void checkNulls(final Iterable<T> values) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final T value : values) {\r\n\t\t\tif (value == null) throw new IllegalArgumentException(\"Element at index \" + i + \" was a null value, which is not permitted.\");\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static <T> void checkNulls(final T[] values) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final T value : values) {\r\n\t\t\tif (value == null) throw new IllegalArgumentException(\"Element at index \" + i + \" was a null value, which is not permitted.\");\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void checkScale(final BigDecimal value, final int scale) {\r\n\t\ttry {\r\n\t\t\tif (value != null) value.setScale(scale);\r\n\t\t} catch (final ArithmeticException e) {\r\n\t\t\tthrow new IllegalArgumentException(\"Decimal places allowed: \" + scale + \". Value: \" + value, e);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void checkScale(final BigDecimal[] values, final int scale) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final BigDecimal value : values) {\r\n\t\t\ttry {\r\n\t\t\t\tif (value != null) value.setScale(scale);\r\n\t\t\t} catch (final ArithmeticException e) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid value for element at index \" + i + \". Decimal places allowed: \" + scale + \". Value: \" + value, e);\r\n\t\t\t}\r\n\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void checkScale(final Iterable<BigDecimal> values, final int scale) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final BigDecimal value : values) {\r\n\t\t\ttry {\r\n\t\t\t\tif (value != null) value.setScale(scale);\r\n\t\t\t} catch (final ArithmeticException e) {\r\n\t\t\t\tthrow new IllegalArgumentException(\r\n\t\t\t\t\t\t\"Invalid value for element at index \" + i + \". Decimal places allowed: \" + scale + \". Value: \" + value, e);\r\n\t\t\t}\r\n\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static BigDecimal setScale(final BigDecimal value, final int scale) {\r\n\t\treturn value.setScale(scale, BigDecimal.ROUND_HALF_UP);\r\n\t}\r\n\r\n\tpublic static List<BigDecimal> setScale(final List<BigDecimal> values, final int scale) {\r\n\t\tif (values == null) return null;\r\n\r\n\t\tfinal ArrayList<BigDecimal> result = new ArrayList<BigDecimal>(values.size());\r\n\t\tfor (final BigDecimal value : values) result.add(value != null ? setScale(value, scale) : null);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static Set<BigDecimal> setScale(final Set<BigDecimal> values, final int scale) {\r\n\t\tif (values == null) return null;\r\n\r\n\t\tfinal HashSet<BigDecimal> result = new HashSet<BigDecimal>(values.size());\r\n\t\tfor (final BigDecimal value : values) result.add(value != null ? setScale(value, scale) : null);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static BigDecimal[] setScale(final BigDecimal[] values, final int scale) {\r\n\t\tif (values == null) return null;\r\n\r\n\t\tfinal BigDecimal[] result = new BigDecimal[values.length];\r\n\t\tint i = 0;\r\n\t\tfor (final BigDecimal value : values) result[i++] = value != null ? setScale(value, scale) : null;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static void checkLength(final String value, final int length) {\r\n\t\tif (value != null && value.length() > length) throw new IllegalArgumentException(\r\n\t\t\t\t\"Maximum length allowed: \" + length + \". Value: \" + value);\r\n\t}\r\n\r\n\tpublic static void checkLength(final Iterable<String> values, final int length) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final String value : values) {\r\n\t\t\tif (value != null && value.length() > length) throw new IllegalArgumentException(\r\n\t\t\t\t\t\"Invalid value for element at index \" + i + \". Maximum length allowed: \" + length + \". Value: \" + value);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void checkLength(final String[] values, final int length) {\r\n\t\tif (values == null) return;\r\n\r\n\t\tint i = 0;\r\n\t\tfor (final String value : values) {\r\n\t\t\tif (value != null && value.length() > length) throw new IllegalArgumentException(\r\n\t\t\t\t\t\"Invalid value for element at index \" + i + \". Maximum length allowed: \" + length + \". Value: \" + value);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static boolean compareBigDecimal(final Iterable<BigDecimal> left, final Iterable<BigDecimal> right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tfinal Iterator<BigDecimal> leftIterator = left.iterator();\r\n\t\tfinal Iterator<BigDecimal> rightIterator = right.iterator();\r\n\r\n\t\twhile (leftIterator.hasNext() && rightIterator.hasNext()) {\r\n\t\t\tfinal BigDecimal l = leftIterator.next();\r\n\t\t\tfinal BigDecimal r = rightIterator.next();\r\n\t\t\tif (!(l == r || l != null && r != null && l.compareTo(r) == 0)) return false;\r\n\t\t}\r\n\r\n\t\treturn leftIterator.hasNext() == rightIterator.hasNext();\r\n\t}\r\n\r\n\tpublic static boolean compareBigDecimal(final BigDecimal[] left, final BigDecimal[] right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tif (left.length != right.length) return false;\r\n\t\tfor (int i = 0; i < left.length; i++) {\r\n\t\t\tfinal BigDecimal l = left[i];\r\n\t\t\tfinal BigDecimal r = right[i];\r\n\t\t\tif (!(l == r || l != null && r != null && l.compareTo(r) == 0)) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate static final Comparator<BigDecimal> bigDecimalComparator = new Comparator<BigDecimal>() {\r\n\t\t@Override\r\n\t\tpublic int compare(final BigDecimal left, final BigDecimal right) {\r\n\t\t\treturn left == null && right == null ? 0\r\n\t\t\t\t : left == null ? -1\r\n\t\t\t\t : right == null? 1\r\n\t\t\t\t : left.compareTo(right);\r\n\t\t}\r\n\t};\r\n\r\n\tpublic static boolean compareBigDecimal(final Set<BigDecimal> left, final Set<BigDecimal> right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tif (left.size() != right.size()) return false;\r\n\r\n\t\tfinal BigDecimal[] leftSorted = left.toArray(new BigDecimal[left.size()]);\r\n\t\tArrays.sort(leftSorted, bigDecimalComparator);\r\n\t\tfinal BigDecimal[] rightSorted = right.toArray(new BigDecimal[right.size()]);\r\n\t\tArrays.sort(rightSorted, bigDecimalComparator);\r\n\r\n\t\treturn compareBigDecimal(leftSorted, rightSorted);\r\n\t}\r\n\r\n\tpublic static boolean compareBinary(final Iterable<byte[]> left, final Iterable<byte[]> right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tfinal Iterator<byte[]> leftIterator = left.iterator();\r\n\t\tfinal Iterator<byte[]> rightIterator = right.iterator();\r\n\r\n\t\twhile (leftIterator.hasNext() && rightIterator.hasNext()) {\r\n\t\t\tfinal byte[] l = leftIterator.next();\r\n\t\t\tfinal byte[] r = rightIterator.next();\r\n\t\t\tif (!Arrays.equals(l, r)) return false;\r\n\t\t}\r\n\r\n\t\treturn leftIterator.hasNext() == rightIterator.hasNext();\r\n\t}\r\n\r\n\tpublic static boolean compareBinary(final byte[][] left, final byte[][] right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tif (left.length != right.length) return false;\r\n\r\n\t\tfor (int i = 0; i < left.length; i++) {\r\n\t\t\tif (!Arrays.equals(left[i], right[i])) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic static boolean compareBinary(final Set<byte[]> left, final Set<byte[]> right) {\r\n\t\tif (left == null && right == null) return true;\r\n\t\tif (left == null || right == null) return false;\r\n\r\n\t\tif (left.size() != right.size()) return false;\r\n\r\n\t\tloop:\r\n\t\tfor (final byte[] l : left) {\r\n\t\t\tfor (final byte[] r : right) {\r\n\t\t\t\tif (Arrays.equals(l, r)) continue loop;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n","Java/namespace.A.B.java":"package namespace.A;\r\n\r\npublic class B   implements java.io.Serializable, com.dslplatform.patterns.AggregateRoot {\r\n\r\n\tpublic B() {\r\n\r\n\t\tURI = java.util.UUID.randomUUID().toString();\r\n\t\tthis.ID = 0;\r\n\t}\r\n\r\n\tprivate transient com.dslplatform.patterns.ServiceLocator _serviceLocator;\r\n\r\n\tprivate String URI;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tpublic String getURI()  {\r\n\r\n\t\treturn this.URI;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn URI.hashCode();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(final Object obj) {\r\n\t\tif (this == obj)\r\n\t\t\treturn true;\r\n\t\tif (obj == null)\r\n\t\t\treturn false;\r\n\r\n\t\tif (getClass() != obj.getClass())\r\n\t\t\treturn false;\r\n\t\tfinal B other = (B) obj;\r\n\r\n\t\treturn URI.equals(other.URI);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"B(\" + URI + ')';\r\n\t}\r\n\r\n\tprivate static final long serialVersionUID = 0x0097000a;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private B(\r\n\t\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"_serviceLocator\") final com.dslplatform.patterns.ServiceLocator _serviceLocator,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\") final String URI ,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\") final int ID) {\r\n\t\tthis._serviceLocator = _serviceLocator;\r\n\t\tthis.URI = URI != null ? URI : new java.util.UUID(0L, 0L).toString();\r\n\t\tthis.ID = ID;\r\n\t}\r\n\r\n\tprivate int ID;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\t@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)\r\n\tpublic int getID()  {\r\n\r\n\t\treturn ID;\r\n\t}\r\n\r\n\tprivate B setID(final int value) {\r\n\r\n\t\tthis.ID = value;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic boolean isNewAggregate() {\r\n\t\treturn _serviceLocator == null;\r\n\t}\r\n\r\n\tpublic static B find(final String uri) throws java.io.IOException {\r\n\t\treturn find(uri, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static B find(final String uri, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.CrudProxy.class).read(B.class, uri).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<B> find(final Iterable<String> uris) throws java.io.IOException {\r\n\t\treturn find(uris, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<B> find(final Iterable<String> uris, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).find(B.class, uris).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<B> findAll() throws java.io.IOException {\r\n\t\treturn findAll(null, null, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<B> findAll(final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\treturn findAll(null, null, locator);\r\n\t}\r\n\tpublic static java.util.List<B> findAll(final Integer limit, final Integer offset) throws java.io.IOException {\r\n\t\treturn findAll(limit, offset, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<B> findAll(final Integer limit, final Integer offset, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).findAll(B.class, limit, offset, null).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<B> search(final com.dslplatform.patterns.Specification<B> specification) throws java.io.IOException {\r\n\t\treturn search(specification, null, null, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<B> search(final com.dslplatform.patterns.Specification<B> specification, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\treturn search(specification, null, null, locator);\r\n\t}\r\n\tpublic static java.util.List<B> search(final com.dslplatform.patterns.Specification<B> specification, final Integer limit, final Integer offset) throws java.io.IOException {\r\n\t\treturn search(specification, limit, offset, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<B> search(final com.dslplatform.patterns.Specification<B> specification, final Integer limit, final Integer offset, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).search(specification, limit, offset, null).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static long count() throws java.io.IOException {\r\n\t\treturn count(com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).count(B.class).get().longValue();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.Specification<B> specification) throws java.io.IOException {\r\n\t\treturn count(specification, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.Specification<B> specification, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).count(specification).get().longValue();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n}\r\n","Java/namespace.A.repositories.BRepository.java":"package namespace.A.repositories;\r\n\r\npublic class BRepository extends com.dslplatform.client.ClientPersistableRepository<namespace.A.B> {\r\n\tpublic BRepository(final com.dslplatform.patterns.ServiceLocator locator) {\r\n\t\tsuper(namespace.A.B.class, locator);\r\n\t}\r\n}","Java/namespace.A.C.java":"package namespace.A;\r\n\r\npublic class C   implements java.io.Serializable, com.dslplatform.patterns.AggregateRoot {\r\n\r\n\tpublic C() {\r\n\r\n\t\tURI = java.util.UUID.randomUUID().toString();\r\n\t\tthis.ID = 0;\r\n\t\tthis.bID = 0;\r\n\t\tthis.i = 0;\r\n\t}\r\n\r\n\tprivate transient com.dslplatform.patterns.ServiceLocator _serviceLocator;\r\n\r\n\tprivate String URI;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tpublic String getURI()  {\r\n\r\n\t\treturn this.URI;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn URI.hashCode();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(final Object obj) {\r\n\t\tif (this == obj)\r\n\t\t\treturn true;\r\n\t\tif (obj == null)\r\n\t\t\treturn false;\r\n\r\n\t\tif (getClass() != obj.getClass())\r\n\t\t\treturn false;\r\n\t\tfinal C other = (C) obj;\r\n\r\n\t\treturn URI.equals(other.URI);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"C(\" + URI + ')';\r\n\t}\r\n\r\n\tprivate static final long serialVersionUID = 0x0097000a;\r\n\r\n\tpublic C(\r\n\t\t\tfinal namespace.A.B b,\r\n\t\t\tfinal int i) {\r\n\r\n\t\tsetB(b);\r\n\t\tsetI(i);\r\n\t}\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private C(\r\n\t\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"_serviceLocator\") final com.dslplatform.patterns.ServiceLocator _serviceLocator,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\") final String URI ,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\") final int ID,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"bURI\") final String bURI,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"bID\") final int bID,\r\n\t\t\t@com.fasterxml.jackson.annotation.JsonProperty(\"i\") final int i) {\r\n\t\tthis._serviceLocator = _serviceLocator;\r\n\t\tthis.URI = URI != null ? URI : new java.util.UUID(0L, 0L).toString();\r\n\t\tthis.ID = ID;\r\n\t\tthis.bURI = bURI;\r\n\t\tthis.bID = bID;\r\n\t\tthis.i = i;\r\n\t}\r\n\r\n\tprivate int ID;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\t@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)\r\n\tpublic int getID()  {\r\n\r\n\t\treturn ID;\r\n\t}\r\n\r\n\tprivate C setID(final int value) {\r\n\r\n\t\tthis.ID = value;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic boolean isNewAggregate() {\r\n\t\treturn _serviceLocator == null;\r\n\t}\r\n\r\n\tpublic static C find(final String uri) throws java.io.IOException {\r\n\t\treturn find(uri, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static C find(final String uri, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.CrudProxy.class).read(C.class, uri).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<C> find(final Iterable<String> uris) throws java.io.IOException {\r\n\t\treturn find(uris, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<C> find(final Iterable<String> uris, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).find(C.class, uris).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<C> findAll() throws java.io.IOException {\r\n\t\treturn findAll(null, null, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<C> findAll(final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\treturn findAll(null, null, locator);\r\n\t}\r\n\tpublic static java.util.List<C> findAll(final Integer limit, final Integer offset) throws java.io.IOException {\r\n\t\treturn findAll(limit, offset, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<C> findAll(final Integer limit, final Integer offset, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).findAll(C.class, limit, offset, null).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static java.util.List<C> search(final com.dslplatform.patterns.Specification<C> specification) throws java.io.IOException {\r\n\t\treturn search(specification, null, null, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<C> search(final com.dslplatform.patterns.Specification<C> specification, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\treturn search(specification, null, null, locator);\r\n\t}\r\n\tpublic static java.util.List<C> search(final com.dslplatform.patterns.Specification<C> specification, final Integer limit, final Integer offset) throws java.io.IOException {\r\n\t\treturn search(specification, limit, offset, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static java.util.List<C> search(final com.dslplatform.patterns.Specification<C> specification, final Integer limit, final Integer offset, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).search(specification, limit, offset, null).get();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static long count() throws java.io.IOException {\r\n\t\treturn count(com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).count(C.class).get().longValue();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.Specification<C> specification) throws java.io.IOException {\r\n\t\treturn count(specification, com.dslplatform.client.Bootstrap.getLocator());\r\n\t}\r\n\tpublic static long count(final com.dslplatform.patterns.Specification<C> specification, final com.dslplatform.patterns.ServiceLocator locator) throws java.io.IOException {\r\n\t\ttry {\r\n\t\t\treturn (locator != null ? locator : com.dslplatform.client.Bootstrap.getLocator()).resolve(com.dslplatform.client.DomainProxy.class).count(specification).get().longValue();\r\n\t\t} catch (final InterruptedException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\tthrow new java.io.IOException(e);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate namespace.A.B b;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonIgnore\r\n\tpublic namespace.A.B getB() throws java.io.IOException {\r\n\r\n\t\tif (b != null && !b.getURI().equals(bURI) || b == null && bURI != null)\r\n\t\t\ttry {\r\n\t\t\t\tcom.dslplatform.client.CrudProxy proxy = _serviceLocator.resolve(com.dslplatform.client.CrudProxy.class);\r\n\t\t\t\tb = proxy.read(namespace.A.B.class, bURI).get();\r\n\t\t\t} catch (final InterruptedException e) {\r\n\t\t\t\tthrow new java.io.IOException(e);\r\n\t\t\t} catch (final java.util.concurrent.ExecutionException e) {\r\n\t\t\t\tthrow new java.io.IOException(e);\r\n\t\t\t}\r\n\t\treturn b;\r\n\t}\r\n\r\n\tpublic C setB(final namespace.A.B value) {\r\n\r\n\t\tif(value == null) throw new IllegalArgumentException(\"Property \\\"b\\\" cannot be null!\");\r\n\r\n\t\tif(value != null && value.getURI() == null) throw new IllegalArgumentException(\"Reference \\\"A.B\\\" for property \\\"b\\\" must be persisted before it's assigned\");\r\n\t\tthis.b = value;\r\n\r\n\t\tthis.bURI = value.getURI();\r\n\r\n\t\tthis.bID = value.getID();\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate String bURI;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"bURI\")\r\n\tpublic String getBURI()  {\r\n\r\n\t\treturn this.bURI;\r\n\t}\r\n\r\n\tprivate int bID;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"bID\")\r\n\t@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)\r\n\tpublic int getBID()  {\r\n\r\n\t\treturn bID;\r\n\t}\r\n\r\n\tprivate C setBID(final int value) {\r\n\r\n\t\tthis.bID = value;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate int i;\r\n\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"i\")\r\n\t@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)\r\n\tpublic int getI()  {\r\n\r\n\t\treturn i;\r\n\t}\r\n\r\n\tpublic C setI(final int value) {\r\n\r\n\t\tthis.i = value;\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n","Java/namespace.A.repositories.CRepository.java":"package namespace.A.repositories;\r\n\r\npublic class CRepository extends com.dslplatform.client.ClientPersistableRepository<namespace.A.C> {\r\n\tpublic CRepository(final com.dslplatform.patterns.ServiceLocator locator) {\r\n\t\tsuper(namespace.A.C.class, locator);\r\n\t}\r\n}","Java/src/generated/resources/dsl-project.props":"# This configuration file is used for Boostrap initialization.\r\n# These settings can only be used for this project, so do not reuse this file elsewhere.\r\n#\r\nusername=rinmalavi@gmail.com\r\nproject-id=0e5df31e-49ea-4423-94ad-c00d43ba396a\r\napi-url=https://node0.dsl-platform.com/beta_3499948afa480fa382575b/\r\npackage-name=namespace"}