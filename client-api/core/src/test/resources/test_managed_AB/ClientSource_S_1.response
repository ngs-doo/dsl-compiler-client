{"Scala/namespace.A.B.scala":"package namespace.A\r\n\r\nimport com.dslplatform.api.patterns._\r\nimport com.dslplatform.api.client._\r\nimport scala.concurrent.{Await, Future, ExecutionContext}\r\nimport scala.concurrent.duration.Duration\r\n\r\n\r\n\r\n\r\nclass B @com.fasterxml.jackson.annotation.JsonIgnore()  private(\r\n\t  private var _URI: String,\r\n\t  @transient private var __locator: Option[ServiceLocator],\r\n\t  private var _ID: Int\r\n\t) extends Serializable with AggregateRoot {\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tdef URI = { \r\n\t\t_URI\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def URI_= (value: String) { \r\n\t\t_URI = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\toverride def hashCode = URI.hashCode\r\n\toverride def equals(o: Any) = o match {\r\n\t\tcase c: B => c.URI == URI\r\n\t\tcase _ => false\r\n\t}\r\n\r\n\toverride def toString = \"B(\"+ URI +\")\"\r\n\t\r\n\t\t\r\n\t def copy(): B = {\r\n\t\t\r\n\r\n\t\t\t\r\n\t\tnew B(_URI = this.URI, __locator = this.__locator, _ID = _ID)\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private def this(\r\n\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"__locator\") __locator: ServiceLocator\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"URI\") URI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"ID\") ID: Int\r\n\t) =\r\n\t  this(__locator = Some(__locator), _URI = URI, _ID = ID)\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\tdef ID = { \r\n\t\t_ID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def ID_= (value: Int) { \r\n\t\t_ID = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonIgnore\r\n\tdef isNewAggregate() = __locator == None || _URI == null\r\n\t\r\n\r\n\tprivate def updateWithAnother(result: namespace.A.B): this.type = {\r\n\t\tthis._URI = result._URI\r\n\t\tthis._ID = result._ID\r\n\t\tthis\r\n\t}\r\n\r\n\tprivate def create()(implicit locator: ServiceLocator, ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t__locator = Some(if (locator ne null) locator else Bootstrap.getLocator)\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).create(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def update()(implicit ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).update(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def delete()(implicit ec: ExecutionContext, duration: Duration) = {\r\n\t\tif (__locator.isEmpty) throw new IllegalArgumentException(\"Can't delete aggregate before it's saved\")\r\n\t\tAwait.result(__locator.get.resolve(classOf[CrudProxy]).delete[namespace.A.B](URI), duration)\r\n\t}\r\n\r\n\r\n}\r\n\r\nobject B extends AggregateRootCompanion[B]{\r\n\r\n\tdef apply(\r\n\t) = {\r\n\t\tnew B(\r\n\t\t\t__locator = None\r\n\t\t, _URI = java.util.UUID.randomUUID.toString\r\n\t\t, _ID = 0)\r\n\t}\r\n\r\n\t\r\n}\r\n","Scala/namespace.A.C.scala":"package namespace.A\r\n\r\nimport com.dslplatform.api.patterns._\r\nimport com.dslplatform.api.client._\r\nimport scala.concurrent.{Await, Future, ExecutionContext}\r\nimport scala.concurrent.duration.Duration\r\n\r\n\r\n\r\n\r\nclass C @com.fasterxml.jackson.annotation.JsonIgnore()  private(\r\n\t  private var _URI: String,\r\n\t  @transient private var __locator: Option[ServiceLocator],\r\n\t  private var _ID: Int,\r\n\t  @transient private var _b: namespace.A.B,\r\n\t  private var _bURI: String,\r\n\t  private var _bID: Int\r\n\t) extends Serializable with AggregateRoot {\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"URI\")\r\n\tdef URI = { \r\n\t\t_URI\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def URI_= (value: String) { \r\n\t\t_URI = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\toverride def hashCode = URI.hashCode\r\n\toverride def equals(o: Any) = o match {\r\n\t\tcase c: C => c.URI == URI\r\n\t\tcase _ => false\r\n\t}\r\n\r\n\toverride def toString = \"C(\"+ URI +\")\"\r\n\t\r\n\t\t\r\n\t def copy(b: namespace.A.B = null): C = {\r\n\t\t\r\n\r\n\t\t\t\r\n\t\tnew C(_URI = this.URI, __locator = this.__locator, _ID = _ID, _b = if(b != null) b else _b, _bURI = if (b != null) b.URI else this._bURI, _bID = if(b != null) b.ID else this._bID)\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonCreator private def this(\r\n\t\t@com.fasterxml.jackson.annotation.JacksonInject(\"__locator\") __locator: ServiceLocator\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"URI\") URI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"ID\") ID: Int\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"bURI\") bURI: String\r\n\t, @com.fasterxml.jackson.annotation.JsonProperty(\"bID\") bID: Int\r\n\t) =\r\n\t  this(__locator = Some(__locator), _URI = URI, _ID = ID, _bURI = if (bURI == null) \"\" else bURI, _b = null, _bID = bID)\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"ID\")\r\n\tdef ID = { \r\n\t\t_ID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def ID_= (value: Int) { \r\n\t\t_ID = value\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonIgnore\r\n\tdef isNewAggregate() = __locator == None || _URI == null\r\n\t\r\n\r\n\tprivate def updateWithAnother(result: namespace.A.C): this.type = {\r\n\t\tthis._URI = result._URI\r\n\t\tthis._b = result._b\r\n\t\tthis._bURI = result._bURI\r\n\t\tthis._bID = result._bID\r\n\t\tthis._ID = result._ID\r\n\t\tthis\r\n\t}\r\n\r\n\tprivate def create()(implicit locator: ServiceLocator, ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t\r\n\t\tif (this.bURI == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot persist instance of 'namespace.A.C' because reference 'b' was not assigned\");\r\n\t\t}\r\n\t\t__locator = Some(if (locator ne null) locator else Bootstrap.getLocator)\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).create(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def update()(implicit ec: ExecutionContext, duration: Duration): this.type = {\r\n\t\t\r\n\t\tif (this.bURI == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot persist instance of 'namespace.A.C' because reference 'b' was not assigned\");\r\n\t\t}\r\n\t\tval toUpdateWith = Await.result(__locator.get.resolve(classOf[CrudProxy]).update(this), duration)\r\n\t\tupdateWithAnother(toUpdateWith)\r\n\r\n\t}\r\n\r\n\tprivate def delete()(implicit ec: ExecutionContext, duration: Duration) = {\r\n\t\tif (__locator.isEmpty) throw new IllegalArgumentException(\"Can't delete aggregate before it's saved\")\r\n\t\tAwait.result(__locator.get.resolve(classOf[CrudProxy]).delete[namespace.A.C](URI), duration)\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n\tdef b(implicit ec: ExecutionContext, duration: Duration) = { \r\n\tif(__locator.isDefined) {\r\n\t\t\tif (__locator.isDefined && (_b == null || _b.URI != bURI))\r\n\t\t\t\t_b = Await.result(__locator.get.resolve(classOf[CrudProxy]).read[namespace.A.B](bURI), duration)\r\n\t\t}\t\t\t\r\n\t\t_b\r\n\t}\r\n\r\n\t\r\n\tdef b_= (value: namespace.A.B) { \r\n\t\t_b = value\r\n\t\t\r\n\t\t_bURI = value.URI\r\n\t\t\r\n\t\tif(bID != value.ID)\r\n\t\t\tbID = value.ID\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"bURI\")\r\n\tdef bURI = {\r\n\t\t\r\n\t\t_bURI\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@com.fasterxml.jackson.annotation.JsonProperty(\"bID\")\r\n\t def bID = { \r\n\t\t_bID\r\n\t}\r\n\r\n\t\r\n\tprivate [namespace] def bID_= (value: Int) { \r\n\t\t_bID = value\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\nobject C extends AggregateRootCompanion[C]{\r\n\r\n\tdef apply(\r\n\t\tb: namespace.A.B\r\n\t) = {\r\n\t\trequire(b ne null, \"Null value was provided for property \\\"b\\\"\")\r\n\t\tnew C(\r\n\t\t\t__locator = None\r\n\t\t, _URI = java.util.UUID.randomUUID.toString\r\n\t\t, _ID = 0\r\n\t\t, _b = b\r\n\t\t, _bURI = b.URI\r\n\t\t, _bID = b.ID)\r\n\t}\r\n\r\n\t\r\n}\r\n"}